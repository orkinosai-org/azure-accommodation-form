{"version":3,"sources":["../src/components/MessageBar/useMessageBarStyles.styles.ts"],"sourcesContent":["import { makeResetStyles, makeStyles, mergeClasses, shorthands } from '@griffel/react';\nimport { tokens } from '@fluentui/react-theme';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\nimport type { MessageBarSlots, MessageBarState } from './MessageBar.types';\n\nexport const messageBarClassNames: SlotClassNames<MessageBarSlots> = {\n  root: 'fui-MessageBar',\n  icon: 'fui-MessageBar__icon',\n  bottomReflowSpacer: 'fui-MessageBar__bottomReflowSpacer',\n};\n\nconst useRootBaseStyles = makeResetStyles({\n  whiteSpace: 'nowrap',\n  display: 'grid',\n  gridTemplateColumns: 'auto 1fr auto auto',\n  gridTemplateRows: '1fr',\n  gridTemplateAreas: '\"icon body secondaryActions actions\"',\n  paddingLeft: tokens.spacingHorizontalM,\n  border: `${tokens.strokeWidthThin} solid ${tokens.colorNeutralStroke1}`,\n  borderRadius: tokens.borderRadiusMedium,\n  alignItems: 'center',\n  minHeight: '36px',\n  boxSizing: 'border-box',\n  backgroundColor: tokens.colorNeutralBackground3,\n});\n\nconst useIconBaseStyles = makeResetStyles({\n  gridArea: 'icon',\n  fontSize: tokens.fontSizeBase500,\n  marginRight: tokens.spacingHorizontalS,\n  color: tokens.colorNeutralForeground3,\n  display: 'flex',\n  alignItems: 'center',\n});\n\nconst useReflowSpacerBaseStyles = makeResetStyles({\n  marginBottom: tokens.spacingVerticalS,\n  gridArea: 'secondaryActions',\n});\n\nconst useStyles = makeStyles({\n  rootMultiline: {\n    whiteSpace: 'normal',\n    alignItems: 'start',\n    paddingTop: tokens.spacingVerticalMNudge,\n    gridTemplateColumns: 'auto 1fr auto',\n    gridTemplateAreas: `\n      \"icon body actions\"\n      \"secondaryActions secondaryActions secondaryActions\"\n    `,\n  },\n\n  secondaryActionsMultiline: {\n    justifyContent: 'end',\n    marginTop: tokens.spacingVerticalMNudge,\n    marginBottom: tokens.spacingVerticalS,\n    marginRight: '0px',\n  },\n\n  square: {\n    borderRadius: '0',\n  },\n});\n\nconst useIconIntentStyles = makeStyles({\n  info: {\n    /** already in base reset styles */\n  },\n  error: {\n    color: tokens.colorStatusDangerForeground1,\n  },\n  warning: {\n    color: tokens.colorStatusWarningForeground3,\n  },\n  success: {\n    color: tokens.colorStatusSuccessForeground1,\n  },\n});\n\nconst useRootIntentStyles = makeStyles({\n  info: {\n    /** already in base reset styles */\n  },\n  error: {\n    backgroundColor: tokens.colorStatusDangerBackground1,\n    ...shorthands.borderColor(tokens.colorStatusDangerBorder1),\n  },\n  warning: {\n    backgroundColor: tokens.colorStatusWarningBackground1,\n    ...shorthands.borderColor(tokens.colorStatusWarningBorder1),\n  },\n  success: {\n    backgroundColor: tokens.colorStatusSuccessBackground1,\n    ...shorthands.borderColor(tokens.colorStatusSuccessBorder1),\n  },\n});\n\n/**\n * Apply styling to the MessageBar slots based on the state\n */\nexport const useMessageBarStyles_unstable = (state: MessageBarState): MessageBarState => {\n  'use no memo';\n\n  const rootBaseStyles = useRootBaseStyles();\n  const iconBaseStyles = useIconBaseStyles();\n  const iconIntentStyles = useIconIntentStyles();\n  const rootIntentStyles = useRootIntentStyles();\n  const reflowSpacerStyles = useReflowSpacerBaseStyles();\n  const styles = useStyles();\n\n  state.root.className = mergeClasses(\n    messageBarClassNames.root,\n    rootBaseStyles,\n    state.layout === 'multiline' && styles.rootMultiline,\n    state.shape === 'square' && styles.square,\n    rootIntentStyles[state.intent],\n    state.transitionClassName,\n    state.root.className,\n  );\n\n  if (state.icon) {\n    state.icon.className = mergeClasses(\n      messageBarClassNames.icon,\n      iconBaseStyles,\n      iconIntentStyles[state.intent],\n      state.icon.className,\n    );\n  }\n\n  if (state.bottomReflowSpacer) {\n    state.bottomReflowSpacer.className = mergeClasses(messageBarClassNames.bottomReflowSpacer, reflowSpacerStyles);\n  }\n\n  return state;\n};\n"],"names":["messageBarClassNames","useMessageBarStyles_unstable","root","icon","bottomReflowSpacer","useRootBaseStyles","makeResetStyles","whiteSpace","display","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","paddingLeft","tokens","spacingHorizontalM","border","strokeWidthThin","colorNeutralStroke1","borderRadius","borderRadiusMedium","alignItems","minHeight","boxSizing","backgroundColor","colorNeutralBackground3","useIconBaseStyles","gridArea","fontSize","fontSizeBase500","marginRight","spacingHorizontalS","color","colorNeutralForeground3","useReflowSpacerBaseStyles","marginBottom","spacingVerticalS","useStyles","makeStyles","rootMultiline","paddingTop","spacingVerticalMNudge","secondaryActionsMultiline","justifyContent","marginTop","square","useIconIntentStyles","info","error","colorStatusDangerForeground1","warning","colorStatusWarningForeground3","success","colorStatusSuccessForeground1","useRootIntentStyles","colorStatusDangerBackground1","shorthands","borderColor","colorStatusDangerBorder1","colorStatusWarningBackground1","colorStatusWarningBorder1","colorStatusSuccessBackground1","colorStatusSuccessBorder1","state","rootBaseStyles","iconBaseStyles","iconIntentStyles","rootIntentStyles","reflowSpacerStyles","styles","className","mergeClasses","layout","shape","intent","transitionClassName"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}