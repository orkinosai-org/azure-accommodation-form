{"version":3,"sources":["../src/components/ListItem/useListItemStyles.styles.ts"],"sourcesContent":["import type { SlotClassNames } from '@fluentui/react-utilities';\nimport { makeStyles, makeResetStyles, mergeClasses } from '@griffel/react';\nimport { createCustomFocusIndicatorStyle } from '@fluentui/react-tabster';\nimport type { ListItemSlots, ListItemState } from './ListItem.types';\nimport { tokens } from '@fluentui/react-theme';\n\nexport const listItemClassNames: SlotClassNames<ListItemSlots> = {\n  root: 'fui-ListItem',\n  checkmark: 'fui-ListItem__checkmark',\n};\n\nconst useRootBaseStyles = makeResetStyles({\n  padding: 0,\n  margin: 0,\n  textIndent: 0,\n  listStyleType: 'none',\n  ...createCustomFocusIndicatorStyle(\n    {\n      outline: `${tokens.strokeWidthThick} solid ${tokens.colorStrokeFocus2}`,\n      borderRadius: tokens.borderRadiusMedium,\n    },\n    { selector: 'focus' },\n  ),\n});\n\nconst useCheckmarkBaseStyles = makeStyles({\n  root: {\n    alignSelf: 'center',\n\n    '& .fui-Checkbox__indicator': { margin: '4px' },\n  },\n});\n/**\n * Styles for the root slot\n */\nconst useStyles = makeStyles({\n  rootClickableOrSelectable: {\n    display: 'flex',\n    cursor: 'pointer',\n  },\n});\n\n/**\n * Apply styling to the ListItem slots based on the state\n */\nexport const useListItemStyles_unstable = (state: ListItemState): ListItemState => {\n  'use no memo';\n\n  const rootBaseStyles = useRootBaseStyles();\n  const checkmarkBaseStyles = useCheckmarkBaseStyles();\n  const styles = useStyles();\n\n  state.root.className = mergeClasses(\n    listItemClassNames.root,\n    rootBaseStyles,\n    (state.selectable || state.navigable) && styles.rootClickableOrSelectable,\n    state.root.className,\n  );\n\n  if (state.checkmark) {\n    state.checkmark.className = mergeClasses(\n      listItemClassNames.checkmark,\n      checkmarkBaseStyles.root,\n      state.checkmark.className,\n    );\n  }\n\n  return state;\n};\n"],"names":["listItemClassNames","useListItemStyles_unstable","root","checkmark","useRootBaseStyles","makeResetStyles","padding","margin","textIndent","listStyleType","createCustomFocusIndicatorStyle","outline","tokens","strokeWidthThick","colorStrokeFocus2","borderRadius","borderRadiusMedium","selector","useCheckmarkBaseStyles","makeStyles","alignSelf","useStyles","rootClickableOrSelectable","display","cursor","state","rootBaseStyles","checkmarkBaseStyles","styles","className","mergeClasses","selectable","navigable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAMaA,kBAAAA;eAAAA;;IAuCAC,0BAAAA;eAAAA;;;uBA5C6C;8BACV;4BAEzB;AAEhB,MAAMD,qBAAoD;IAC/DE,MAAM;IACNC,WAAW;AACb;AAEA,MAAMC,oBAAoBC,IAAAA,sBAAAA,EAAgB;IACxCC,SAAS;IACTC,QAAQ;IACRC,YAAY;IACZC,eAAe;IACf,GAAGC,IAAAA,6CAAAA,EACD;QACEC,SAAS,CAAC,EAAEC,kBAAAA,CAAOC,gBAAgB,CAAC,OAAO,EAAED,kBAAAA,CAAOE,iBAAiB,CAAC,CAAC;QACvEC,cAAcH,kBAAAA,CAAOI,kBAAkB;IACzC,GACA;QAAEC,UAAU;IAAQ,EACrB;AACH;AAEA,MAAMC,yBAAyBC,IAAAA,iBAAAA,EAAW;IACxCjB,MAAM;QACJkB,WAAW;QAEX,8BAA8B;YAAEb,QAAQ;QAAM;IAChD;AACF;AACA;;CAEC,GACD,MAAMc,YAAYF,IAAAA,iBAAAA,EAAW;IAC3BG,2BAA2B;QACzBC,SAAS;QACTC,QAAQ;IACV;AACF;AAKO,MAAMvB,6BAA6B,CAACwB;IACzC;IAEA,MAAMC,iBAAiBtB;IACvB,MAAMuB,sBAAsBT;IAC5B,MAAMU,SAASP;IAEfI,MAAMvB,IAAI,CAAC2B,SAAS,GAAGC,IAAAA,mBAAAA,EACrB9B,mBAAmBE,IAAI,EACvBwB,gBACA,AAACD,CAAAA,MAAMM,UAAU,IAAIN,MAAMO,SAAS,AAATA,KAAcJ,OAAON,yBAAyB,EACzEG,MAAMvB,IAAI,CAAC2B,SAAS;IAGtB,IAAIJ,MAAMtB,SAAS,EAAE;QACnBsB,MAAMtB,SAAS,CAAC0B,SAAS,GAAGC,IAAAA,mBAAAA,EAC1B9B,mBAAmBG,SAAS,EAC5BwB,oBAAoBzB,IAAI,EACxBuB,MAAMtB,SAAS,CAAC0B,SAAS;IAE7B;IAEA,OAAOJ;AACT"}