{"version":3,"sources":["../src/components/BreadcrumbButton/useBreadcrumbButtonStyles.styles.ts"],"sourcesContent":["import { makeStyles, mergeClasses } from '@griffel/react';\nimport type { BreadcrumbButtonSlots, BreadcrumbButtonState } from './BreadcrumbButton.types';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\nimport { useButtonStyles_unstable, buttonClassNames } from '@fluentui/react-button';\nimport { tokens, typographyStyles } from '@fluentui/react-theme';\nimport { iconFilledClassName, iconRegularClassName } from '@fluentui/react-icons';\n\n/**\n * Static CSS class names used internally for the component slots.\n */\nexport const breadcrumbButtonClassNames: SlotClassNames<BreadcrumbButtonSlots> = {\n  root: 'fui-BreadcrumbButton',\n  icon: 'fui-BreadcrumbButton__icon',\n};\n\n/**\n * CSS variable names used internally for styling in the Breadcrumb.\n */\nconst breadcrumbCSSVars = {\n  breadcrumbIconSizeVar: '--fui-Breadcrumb--icon-size',\n  breadcrumbIconLineHeightVar: '--fui-Breadcrumb--icon-line-height',\n};\n\nconst useIconStyles = makeStyles({\n  base: {\n    fontSize: `var(${breadcrumbCSSVars.breadcrumbIconSizeVar})`,\n    height: `var(${breadcrumbCSSVars.breadcrumbIconSizeVar})`,\n    lineHeight: `var(${breadcrumbCSSVars.breadcrumbIconLineHeightVar})`,\n    width: `var(${breadcrumbCSSVars.breadcrumbIconSizeVar})`,\n    marginRight: tokens.spacingHorizontalXS,\n  },\n  small: {\n    [breadcrumbCSSVars.breadcrumbIconSizeVar]: '12px',\n    [breadcrumbCSSVars.breadcrumbIconLineHeightVar]: tokens.lineHeightBase200,\n  },\n  medium: {\n    [breadcrumbCSSVars.breadcrumbIconSizeVar]: '16px',\n    [breadcrumbCSSVars.breadcrumbIconLineHeightVar]: tokens.lineHeightBase400,\n  },\n  large: {\n    [breadcrumbCSSVars.breadcrumbIconSizeVar]: '20px',\n    [breadcrumbCSSVars.breadcrumbIconLineHeightVar]: tokens.lineHeightBase600,\n  },\n});\n\nconst defaultButtonStyles = {\n  backgroundColor: tokens.colorTransparentBackground,\n  color: tokens.colorNeutralForeground2,\n  cursor: 'auto',\n};\n\nconst currentIconStyles = {\n  ...defaultButtonStyles,\n  [`& .${buttonClassNames.icon}`]: {\n    color: 'unset',\n  },\n  [`& .${iconFilledClassName}`]: {\n    display: 'none',\n  },\n  [`& .${iconRegularClassName}`]: {\n    display: 'inline',\n  },\n};\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 'unset',\n    textWrap: 'nowrap',\n  },\n  small: {\n    height: '24px',\n    ...typographyStyles.caption1,\n    padding: tokens.spacingHorizontalSNudge,\n  },\n  medium: {\n    height: '32px',\n    ...typographyStyles.body1,\n    padding: tokens.spacingHorizontalSNudge,\n  },\n  large: {\n    height: '40px',\n    ...typographyStyles.body2,\n    padding: tokens.spacingHorizontalS,\n  },\n  current: {\n    ':hover': {\n      ...currentIconStyles,\n    },\n    ':hover:active': {\n      ...currentIconStyles,\n    },\n    ':disabled': {\n      ...currentIconStyles,\n    },\n  },\n  currentSmall: {\n    ...typographyStyles.caption1Strong,\n  },\n  currentMedium: {\n    ...typographyStyles.body1Strong,\n  },\n  currentLarge: {\n    ...typographyStyles.subtitle2,\n  },\n});\n\n/**\n * Apply styling to the BreadcrumbButton slots based on the state\n */\nexport const useBreadcrumbButtonStyles_unstable = (state: BreadcrumbButtonState): BreadcrumbButtonState => {\n  'use no memo';\n\n  const styles = useStyles();\n  const iconStyles = useIconStyles();\n\n  const currentSizeMap = {\n    small: styles.currentSmall,\n    medium: styles.currentMedium,\n    large: styles.currentLarge,\n  };\n  state.root.className = mergeClasses(\n    breadcrumbButtonClassNames.root,\n    styles[state.size],\n    styles.root,\n    state.current && currentSizeMap[state.size],\n    state.current && styles.current,\n    state.root.className,\n  );\n\n  if (state.icon) {\n    state.icon.className = mergeClasses(iconStyles.base, iconStyles[state.size], state.icon.className);\n  }\n\n  useButtonStyles_unstable(state);\n\n  return state;\n};\n"],"names":["breadcrumbButtonClassNames","useBreadcrumbButtonStyles_unstable","root","icon","breadcrumbCSSVars","breadcrumbIconSizeVar","breadcrumbIconLineHeightVar","useIconStyles","makeStyles","base","fontSize","height","lineHeight","width","marginRight","tokens","spacingHorizontalXS","small","lineHeightBase200","medium","lineHeightBase400","large","lineHeightBase600","defaultButtonStyles","backgroundColor","colorTransparentBackground","color","colorNeutralForeground2","cursor","currentIconStyles","buttonClassNames","iconFilledClassName","display","iconRegularClassName","useStyles","minWidth","textWrap","typographyStyles","caption1","padding","spacingHorizontalSNudge","body1","body2","spacingHorizontalS","current","currentSmall","caption1Strong","currentMedium","body1Strong","currentLarge","subtitle2","state","styles","iconStyles","currentSizeMap","className","mergeClasses","size","useButtonStyles_unstable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}