{"version":3,"sources":["../src/components/CardHeader/useCardHeaderStyles.styles.ts"],"sourcesContent":["import type { SlotClassNames } from '@fluentui/react-utilities';\nimport { makeStyles, mergeClasses, shorthands } from '@griffel/react';\nimport type { CardHeaderSlots, CardHeaderState } from './CardHeader.types';\n\n/**\n * Static CSS class names used internally for the component slots.\n */\nexport const cardHeaderClassNames: SlotClassNames<CardHeaderSlots> = {\n  root: 'fui-CardHeader',\n  image: 'fui-CardHeader__image',\n  header: 'fui-CardHeader__header',\n  description: 'fui-CardHeader__description',\n  action: 'fui-CardHeader__action',\n};\n\n/**\n * CSS variable names used internally for uniform styling in CardHeader.\n */\nexport const cardHeaderCSSVars = {\n  cardHeaderGapVar: '--fui-CardHeader--gap',\n};\n\nconst useStyles = makeStyles<keyof CardHeaderSlots>({\n  root: {\n    [cardHeaderCSSVars.cardHeaderGapVar]: '12px',\n    alignItems: 'center',\n  },\n  image: {\n    display: 'inline-flex',\n    marginRight: `var(${cardHeaderCSSVars.cardHeaderGapVar})`,\n  },\n  header: {\n    display: 'flex',\n  },\n  description: {\n    display: 'flex',\n  },\n  action: {\n    marginLeft: `var(${cardHeaderCSSVars.cardHeaderGapVar})`,\n\n    // when the card is selected or hovered, it has custom high contrast color and background styles\n    // setting this ensures action buttons adopt those colors and are still visible in forced-colors mode\n    '@media (forced-colors: active)': {\n      '& .fui-Button, & .fui-Link': {\n        ...shorthands.borderColor('currentColor'),\n        color: 'currentColor',\n        outlineColor: 'currentColor',\n      },\n    },\n  },\n});\n\nconst useStylesGrid = makeStyles<keyof CardHeaderSlots>({\n  root: {\n    display: 'grid',\n    gridAutoColumns: 'min-content 1fr min-content',\n  },\n\n  image: {\n    gridColumnStart: '1',\n    gridRowStart: 'span 2',\n  },\n\n  header: {\n    gridColumnStart: '2',\n    gridRowStart: '1',\n  },\n\n  description: {\n    gridColumnStart: '2',\n    gridRowStart: '2',\n  },\n\n  action: {\n    gridColumnStart: '3',\n    gridRowStart: 'span 2',\n  },\n});\n\nconst useStylesFlex = makeStyles<keyof CardHeaderSlots>({\n  root: {\n    display: 'flex',\n  },\n\n  header: {\n    flexGrow: 1,\n  },\n\n  image: {},\n  description: {},\n  action: {},\n});\n\n/**\n * Apply styling to the CardHeader slots based on the state.\n */\nexport const useCardHeaderStyles_unstable = (state: CardHeaderState): CardHeaderState => {\n  'use no memo';\n\n  const styles = useStyles();\n  const stylesGrid = useStylesGrid();\n  const stylesFlex = useStylesFlex();\n\n  const boxModelStyles = state.description ? stylesGrid : stylesFlex;\n\n  const getSlotStyles = (slotName: keyof CardHeaderSlots): string => {\n    return mergeClasses(\n      cardHeaderClassNames[slotName],\n      styles[slotName],\n      boxModelStyles[slotName],\n      state[slotName]?.className,\n    );\n  };\n\n  state.root.className = getSlotStyles('root');\n\n  if (state.image) {\n    state.image.className = getSlotStyles('image');\n  }\n\n  if (state.header) {\n    state.header.className = getSlotStyles('header');\n  }\n\n  if (state.description) {\n    state.description.className = getSlotStyles('description');\n  }\n\n  if (state.action) {\n    state.action.className = getSlotStyles('action');\n  }\n\n  return state;\n};\n"],"names":["cardHeaderCSSVars","cardHeaderClassNames","useCardHeaderStyles_unstable","root","image","header","description","action","cardHeaderGapVar","useStyles","makeStyles","alignItems","display","marginRight","marginLeft","shorthands","borderColor","color","outlineColor","useStylesGrid","gridAutoColumns","gridColumnStart","gridRowStart","useStylesFlex","flexGrow","state","styles","stylesGrid","stylesFlex","boxModelStyles","getSlotStyles","slotName","mergeClasses","className"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAkBaA,iBAAAA;eAAAA;;IAXAC,oBAAAA;eAAAA;;IAyFAC,4BAAAA;eAAAA;;;uBA/FwC;AAM9C,MAAMD,uBAAwD;IACnEE,MAAM;IACNC,OAAO;IACPC,QAAQ;IACRC,aAAa;IACbC,QAAQ;AACV;AAKO,MAAMP,oBAAoB;IAC/BQ,kBAAkB;AACpB;AAEA,MAAMC,YAAYC,IAAAA,iBAAAA,EAAkC;IAClDP,MAAM;QACJ,CAACH,kBAAkBQ,gBAAgB,CAAC,EAAE;QACtCG,YAAY;IACd;IACAP,OAAO;QACLQ,SAAS;QACTC,aAAa,CAAC,IAAI,EAAEb,kBAAkBQ,gBAAgB,CAAC,CAAC,CAAC;IAC3D;IACAH,QAAQ;QACNO,SAAS;IACX;IACAN,aAAa;QACXM,SAAS;IACX;IACAL,QAAQ;QACNO,YAAY,CAAC,IAAI,EAAEd,kBAAkBQ,gBAAgB,CAAC,CAAC,CAAC;QAExD,gGAAgG;QAChG,qGAAqG;QACrG,kCAAkC;YAChC,8BAA8B;gBAC5B,GAAGO,iBAAAA,CAAWC,WAAW,CAAC,eAAe;gBACzCC,OAAO;gBACPC,cAAc;YAChB;QACF;IACF;AACF;AAEA,MAAMC,gBAAgBT,IAAAA,iBAAAA,EAAkC;IACtDP,MAAM;QACJS,SAAS;QACTQ,iBAAiB;IACnB;IAEAhB,OAAO;QACLiB,iBAAiB;QACjBC,cAAc;IAChB;IAEAjB,QAAQ;QACNgB,iBAAiB;QACjBC,cAAc;IAChB;IAEAhB,aAAa;QACXe,iBAAiB;QACjBC,cAAc;IAChB;IAEAf,QAAQ;QACNc,iBAAiB;QACjBC,cAAc;IAChB;AACF;AAEA,MAAMC,gBAAgBb,IAAAA,iBAAAA,EAAkC;IACtDP,MAAM;QACJS,SAAS;IACX;IAEAP,QAAQ;QACNmB,UAAU;IACZ;IAEApB,OAAO,CAAC;IACRE,aAAa,CAAC;IACdC,QAAQ,CAAC;AACX;AAKO,MAAML,+BAA+B,CAACuB;IAC3C;IAEA,MAAMC,SAASjB;IACf,MAAMkB,aAAaR;IACnB,MAAMS,aAAaL;IAEnB,MAAMM,iBAAiBJ,MAAMnB,WAAW,GAAGqB,aAAaC;IAExD,MAAME,gBAAgB,CAACC;YAKnBN;QAJF,OAAOO,IAAAA,mBAAAA,EACL/B,oBAAoB,CAAC8B,SAAS,EAC9BL,MAAM,CAACK,SAAS,EAChBF,cAAc,CAACE,SAAS,EAAA,AACxBN,CAAAA,kBAAAA,KAAK,CAACM,SAAS,AAATA,MAAS,QAAfN,oBAAAA,KAAAA,IAAAA,KAAAA,IAAAA,gBAAiBQ,SAAS;IAE9B;IAEAR,MAAMtB,IAAI,CAAC8B,SAAS,GAAGH,cAAc;IAErC,IAAIL,MAAMrB,KAAK,EAAE;QACfqB,MAAMrB,KAAK,CAAC6B,SAAS,GAAGH,cAAc;IACxC;IAEA,IAAIL,MAAMpB,MAAM,EAAE;QAChBoB,MAAMpB,MAAM,CAAC4B,SAAS,GAAGH,cAAc;IACzC;IAEA,IAAIL,MAAMnB,WAAW,EAAE;QACrBmB,MAAMnB,WAAW,CAAC2B,SAAS,GAAGH,cAAc;IAC9C;IAEA,IAAIL,MAAMlB,MAAM,EAAE;QAChBkB,MAAMlB,MAAM,CAAC0B,SAAS,GAAGH,cAAc;IACzC;IAEA,OAAOL;AACT"}