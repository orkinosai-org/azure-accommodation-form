@page "/"
@rendermode InteractiveServer
@using BlazorApp.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations

<PageTitle>Azure Accommodation Application</PageTitle>

<div style="padding: 20px; max-width: 1200px; margin: 0 auto;">
    <h1>Azure Accommodation Application</h1>
    <p>Welcome to the Azure Accommodation Application. You can test the counter demo and fill out the accommodation form below.</p>

    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin-top: 2rem;">
        <!-- Counter Demo Section -->
        <div style="padding: 1.5rem; border: 1px solid #ddd; border-radius: 8px; background-color: #f8f9fa;">
            <h2>Counter Demo</h2>
            <p>This is a simple counter demo to show Blazor interactivity.</p>
            
            <p role="status" style="font-size: 1.2rem; margin: 1rem 0;">Current count: <strong>@currentCount</strong></p>
            
            <button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
        </div>

        <!-- Quick Accommodation Form Section -->
        <div style="padding: 1.5rem; border: 1px solid #ddd; border-radius: 8px; background-color: #f8f9fa;">
            <h2>Quick Accommodation Form</h2>
            <p>Fill out the basic details for accommodation booking. For the full application form, <a href="/application">click here</a>.</p>
            
            <EditForm Model="@accommodationForm" OnValidSubmit="@HandleQuickSubmit" FormName="QuickAccommodationForm">
                <DataAnnotationsValidator />
                
                @if (!string.IsNullOrEmpty(quickFormError))
                {
                    <div class="alert alert-danger mb-3">
                        <small>@quickFormError</small>
                    </div>
                }

                <div class="form-group mb-3">
                    <label for="quickName" class="form-label">Name *</label>
                    <InputText id="quickName" @bind-Value="accommodationForm.Name" class="form-control" placeholder="Your name" />
                    <ValidationMessage For="@(() => accommodationForm.Name)" class="text-danger" />
                </div>

                <div class="form-group mb-3">
                    <label for="quickEmail" class="form-label">Email *</label>
                    <InputText id="quickEmail" @bind-Value="accommodationForm.Email" class="form-control" type="email" placeholder="Your email" />
                    <ValidationMessage For="@(() => accommodationForm.Email)" class="text-danger" />
                </div>

                <div class="form-group mb-3">
                    <label for="quickCheckin" class="form-label">Check-in *</label>
                    <InputDate id="quickCheckin" @bind-Value="accommodationForm.CheckInDate" class="form-control" />
                    <ValidationMessage For="@(() => accommodationForm.CheckInDate)" class="text-danger" />
                </div>

                <div class="form-group mb-3">
                    <label for="quickCheckout" class="form-label">Check-out *</label>
                    <InputDate id="quickCheckout" @bind-Value="accommodationForm.CheckOutDate" class="form-control" />
                    <ValidationMessage For="@(() => accommodationForm.CheckOutDate)" class="text-danger" />
                </div>

                <div class="form-group mb-3">
                    <label for="quickFile" class="form-label">Upload File *</label>
                    <InputFile id="quickFile" OnChange="@HandleQuickFileUpload" class="form-control" accept="image/*,.pdf" />
                    <ValidationMessage For="@(() => accommodationForm.UploadedFileName)" class="text-danger" />
                    @if (!string.IsNullOrEmpty(accommodationForm.UploadedFileName))
                    {
                        <div class="mt-1">
                            <small class="text-success">✓ @accommodationForm.UploadedFileName</small>
                        </div>
                    }
                </div>

                <button type="submit" class="btn btn-success" disabled="@isQuickSubmitting">
                    @if (isQuickSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-1"></span>
                        <span>Submitting...</span>
                    }
                    else
                    {
                        <span>Quick Submit</span>
                    }
                </button>
            </EditForm>

            @if (quickFormSuccess)
            {
                <div class="alert alert-success mt-3">
                    <h5>🎉 Success!</h5>
                    <p><strong>Quick booking submitted!</strong></p>
                    <p>@accommodationForm.Name - @accommodationForm.CheckInDate?.ToString("MMM dd") to @accommodationForm.CheckOutDate?.ToString("MMM dd")</p>
                    <small>For detailed applications, use the full form above.</small>
                </div>
            }
        </div>
    </div>

    <!-- Link to Full Form -->
    <div style="text-align: center; margin-top: 2rem; padding: 1.5rem; background-color: #e3f2fd; border-radius: 8px;">
        <h3>Need to fill out the complete application?</h3>
        <p>The quick form above is for basic bookings. For detailed tenant applications with all required documentation, use our comprehensive form.</p>
        <a href="/application" class="btn btn-primary btn-lg">Go to Full Application Form</a>
    </div>
</div>

<style>
    .form-group {
        margin-bottom: 0.75rem;
    }

    .form-label {
        font-weight: 600;
        margin-bottom: 0.25rem;
        color: #333;
        font-size: 0.9rem;
    }

    .form-control {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        font-size: 0.9rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

    .form-control:focus {
        border-color: #86b7fe;
        outline: 0;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }

    .btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 0.375rem;
        font-weight: 500;
        text-decoration: none;
        cursor: pointer;
        font-size: 0.9rem;
        transition: all 0.15s ease-in-out;
    }

    .btn-primary {
        background-color: #0d6efd;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background-color: #0b5ed7;
    }

    .btn-success {
        background-color: #198754;
        color: white;
    }

    .btn-success:hover:not(:disabled) {
        background-color: #157347;
    }

    .btn:disabled {
        opacity: 0.65;
        cursor: not-allowed;
    }

    .btn-lg {
        padding: 1rem 2rem;
        font-size: 1.125rem;
    }

    .alert {
        padding: 0.75rem;
        border: 1px solid transparent;
        border-radius: 0.375rem;
        margin-bottom: 0.75rem;
    }

    .alert-success {
        color: #0f5132;
        background-color: #d1e7dd;
        border-color: #badbcc;
    }

    .alert-danger {
        color: #842029;
        background-color: #f8d7da;
        border-color: #f5c2c7;
    }

    .text-danger {
        color: #dc3545;
        font-size: 0.8em;
        margin-top: 0.25rem;
    }

    .text-success {
        color: #198754;
    }

    .spinner-border {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        vertical-align: -0.125em;
        border: 0.125em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    .spinner-border-sm {
        width: 0.875rem;
        height: 0.875rem;
        border-width: 0.125em;
    }

    /* Animation for spinner */
    @@keyframes spinner-border {
        to {
            transform: rotate(360deg);
        }
    }

    .mb-3 {
        margin-bottom: 1rem;
    }

    .mt-1 {
        margin-top: 0.25rem;
    }

    .mt-3 {
        margin-top: 1rem;
    }

    .me-1 {
        margin-right: 0.25rem;
    }

    h1, h2, h3 {
        color: #333;
        margin-bottom: 1rem;
    }

    h2 {
        font-size: 1.5rem;
    }

    h3 {
        font-size: 1.25rem;
    }

    h5 {
        margin-bottom: 0.5rem;
    }

    a {
        color: #0d6efd;
        text-decoration: none;
    }

    a:hover {
        text-decoration: underline;
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        div[style*="grid-template-columns: 1fr 1fr"] {
            display: block !important;
        }
        
        div[style*="grid-template-columns: 1fr 1fr"] > div {
            margin-bottom: 2rem;
        }
    }
</style>

@code {
    private int currentCount = 0;
    private SimpleAccommodationForm accommodationForm = new();
    private bool isQuickSubmitting = false;
    private bool quickFormSuccess = false;
    private string quickFormError = string.Empty;

    private void IncrementCount()
    {
        currentCount++;
    }

    private async Task HandleQuickSubmit()
    {
        quickFormError = string.Empty;
        quickFormSuccess = false;
        
        // Custom validation
        if (!ValidateQuickForm())
        {
            return;
        }

        isQuickSubmitting = true;
        StateHasChanged();

        try
        {
            // Simulate processing delay
            await Task.Delay(1500);

            // Log form data to console
            Console.WriteLine("Quick Accommodation Form Submitted:");
            Console.WriteLine($"Name: {accommodationForm.Name}");
            Console.WriteLine($"Email: {accommodationForm.Email}");
            Console.WriteLine($"Check-in: {accommodationForm.CheckInDate:yyyy-MM-dd}");
            Console.WriteLine($"Check-out: {accommodationForm.CheckOutDate:yyyy-MM-dd}");
            Console.WriteLine($"File: {accommodationForm.UploadedFileName}");

            quickFormSuccess = true;
        }
        catch (Exception ex)
        {
            quickFormError = "An error occurred while submitting the form. Please try again.";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isQuickSubmitting = false;
            StateHasChanged();
        }
    }

    private bool ValidateQuickForm()
    {
        var errors = new List<string>();

        // Check if check-out date is after check-in date
        if (accommodationForm.CheckInDate.HasValue && accommodationForm.CheckOutDate.HasValue)
        {
            if (accommodationForm.CheckOutDate <= accommodationForm.CheckInDate)
            {
                errors.Add("Check-out date must be after check-in date.");
            }
        }

        // Check if dates are in the future
        if (accommodationForm.CheckInDate.HasValue && accommodationForm.CheckInDate < DateTime.Today)
        {
            errors.Add("Check-in date cannot be in the past.");
        }

        // Check file upload
        if (string.IsNullOrEmpty(accommodationForm.UploadedFileName))
        {
            errors.Add("Please upload a file.");
        }

        if (errors.Any())
        {
            quickFormError = string.Join(" ", errors);
            return false;
        }

        return true;
    }

    private async Task HandleQuickFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            // Validate file size (max 3MB for quick form)
            if (file.Size > 3 * 1024 * 1024)
            {
                quickFormError = "File size must be less than 3MB.";
                return;
            }

            // Validate file type
            var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif", "application/pdf" };
            if (!allowedTypes.Contains(file.ContentType))
            {
                quickFormError = "Please upload an image file (JPG, PNG, GIF) or PDF document.";
                return;
            }

            // Store the filename
            accommodationForm.UploadedFileName = file.Name;
            quickFormError = string.Empty;
            StateHasChanged();
        }
    }
}
