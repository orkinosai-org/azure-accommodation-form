@page "/application"
@using BlazorApp.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

<PageTitle>Accommodation Form</PageTitle>

<div style="padding: 20px; max-width: 600px; margin: 0 auto;">
    <h2>Accommodation Booking Form</h2>
    <p>Please fill out all required fields to book your accommodation.</p>

    <EditForm Model="@accommodationForm" OnValidSubmit="@HandleValidSubmit" FormName="AccommodationForm">
        <DataAnnotationsValidator />
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3 mb-3">
                <h5>Please correct the following errors:</h5>
                <p>@errorMessage</p>
            </div>
        }

        <ValidationSummary class="alert alert-danger" />

        <div class="form-group mb-3">
            <label for="name" class="form-label">Full Name *</label>
            <InputText id="name" @bind-Value="accommodationForm.Name" class="form-control" placeholder="Enter your full name" />
            <ValidationMessage For="@(() => accommodationForm.Name)" class="text-danger" />
        </div>

        <div class="form-group mb-3">
            <label for="email" class="form-label">Email Address *</label>
            <InputText id="email" @bind-Value="accommodationForm.Email" class="form-control" type="email" placeholder="Enter your email address" />
            <ValidationMessage For="@(() => accommodationForm.Email)" class="text-danger" />
        </div>

        <div class="form-group mb-3">
            <label for="checkin" class="form-label">Check-in Date *</label>
            <InputDate id="checkin" @bind-Value="accommodationForm.CheckInDate" class="form-control" />
            <ValidationMessage For="@(() => accommodationForm.CheckInDate)" class="text-danger" />
        </div>

        <div class="form-group mb-3">
            <label for="checkout" class="form-label">Check-out Date *</label>
            <InputDate id="checkout" @bind-Value="accommodationForm.CheckOutDate" class="form-control" />
            <ValidationMessage For="@(() => accommodationForm.CheckOutDate)" class="text-danger" />
        </div>

        <div class="form-group mb-3">
            <label for="fileUpload" class="form-label">Upload Image/Document *</label>
            <InputFile id="fileUpload" OnChange="@HandleFileUpload" class="form-control" accept="image/*,.pdf,.doc,.docx" />
            <ValidationMessage For="@(() => accommodationForm.UploadedFileName)" class="text-danger" />
            @if (!string.IsNullOrEmpty(accommodationForm.UploadedFileName))
            {
                <div class="mt-2">
                    <small class="text-success">âœ“ File uploaded: @accommodationForm.UploadedFileName</small>
                </div>
            }
        </div>

        <div class="d-grid gap-2">
            <button type="submit" class="btn btn-primary btn-lg" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    <span>Submitting...</span>
                }
                else
                {
                    <span>Submit Booking</span>
                }
            </button>
        </div>
    </EditForm>

    @if (showSuccess)
    {
        <div class="alert alert-success mt-4">
            <h4>ðŸŽ‰ Success!</h4>
            <p>Your accommodation booking has been submitted successfully!</p>
            <p><strong>Booking Details:</strong></p>
            <ul>
                <li><strong>Name:</strong> @accommodationForm.Name</li>
                <li><strong>Email:</strong> @accommodationForm.Email</li>
                <li><strong>Check-in:</strong> @accommodationForm.CheckInDate?.ToString("MMM dd, yyyy")</li>
                <li><strong>Check-out:</strong> @accommodationForm.CheckOutDate?.ToString("MMM dd, yyyy")</li>
                <li><strong>File:</strong> @accommodationForm.UploadedFileName</li>
            </ul>
            <p>You should receive a confirmation email shortly.</p>
        </div>
    }
</div>

<style>
    .form-group {
        margin-bottom: 1rem;
    }

    .form-label {
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #333;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        font-size: 1rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

    .form-control:focus {
        border-color: #86b7fe;
        outline: 0;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 0.375rem;
        font-weight: 500;
        text-decoration: none;
        cursor: pointer;
        font-size: 1rem;
        transition: all 0.15s ease-in-out;
    }

    .btn-primary {
        background-color: #0d6efd;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background-color: #0b5ed7;
    }

    .btn:disabled {
        opacity: 0.65;
        cursor: not-allowed;
    }

    .btn-lg {
        padding: 1rem 2rem;
        font-size: 1.25rem;
    }

    .alert {
        padding: 1rem;
        border: 1px solid transparent;
        border-radius: 0.375rem;
        margin-bottom: 1rem;
    }

    .alert-success {
        color: #0f5132;
        background-color: #d1e7dd;
        border-color: #badbcc;
    }

    .alert-danger {
        color: #842029;
        background-color: #f8d7da;
        border-color: #f5c2c7;
    }

    .text-danger {
        color: #dc3545;
        font-size: 0.875em;
        margin-top: 0.25rem;
    }

    .text-success {
        color: #198754;
    }

    .spinner-border {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        vertical-align: -0.125em;
        border: 0.125em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    .spinner-border-sm {
        width: 0.875rem;
        height: 0.875rem;
        border-width: 0.125em;
    }

    /* Animation for spinner */
    @@keyframes spinner-border {
        to {
            transform: rotate(360deg);
        }
    }

    .mb-3 {
        margin-bottom: 1rem;
    }

    .mt-2 {
        margin-top: 0.5rem;
    }

    .mt-3 {
        margin-top: 1rem;
    }

    .mt-4 {
        margin-top: 1.5rem;
    }

    .me-2 {
        margin-right: 0.5rem;
    }

    .d-grid {
        display: grid;
    }

    .gap-2 {
        gap: 0.5rem;
    }

    h2 {
        color: #333;
        margin-bottom: 1rem;
    }

    h4 {
        margin-bottom: 0.5rem;
    }

    ul {
        margin: 0.5rem 0;
        padding-left: 1.5rem;
    }

    li {
        margin-bottom: 0.25rem;
    }
</style>

@code {
    private SimpleAccommodationForm accommodationForm = new();
    private bool isSubmitting = false;
    private bool showSuccess = false;
    private string errorMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        errorMessage = string.Empty;
        
        // Custom validation
        if (!ValidateForm())
        {
            return;
        }

        isSubmitting = true;
        StateHasChanged();

        try
        {
            // Simulate processing delay
            await Task.Delay(2000);

            // Log form data to console (simulating form submission)
            Console.WriteLine("Accommodation Form Submitted:");
            Console.WriteLine($"Name: {accommodationForm.Name}");
            Console.WriteLine($"Email: {accommodationForm.Email}");
            Console.WriteLine($"Check-in: {accommodationForm.CheckInDate:yyyy-MM-dd}");
            Console.WriteLine($"Check-out: {accommodationForm.CheckOutDate:yyyy-MM-dd}");
            Console.WriteLine($"File: {accommodationForm.UploadedFileName}");

            showSuccess = true;
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while submitting the form. Please try again.";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private bool ValidateForm()
    {
        var errors = new List<string>();

        // Check if check-out date is after check-in date
        if (accommodationForm.CheckInDate.HasValue && accommodationForm.CheckOutDate.HasValue)
        {
            if (accommodationForm.CheckOutDate <= accommodationForm.CheckInDate)
            {
                errors.Add("Check-out date must be after check-in date.");
            }
        }

        // Check if dates are in the future
        if (accommodationForm.CheckInDate.HasValue && accommodationForm.CheckInDate < DateTime.Today)
        {
            errors.Add("Check-in date cannot be in the past.");
        }

        // Check file upload
        if (string.IsNullOrEmpty(accommodationForm.UploadedFileName))
        {
            errors.Add("Please upload an image or document.");
        }

        if (errors.Any())
        {
            errorMessage = string.Join(" ", errors);
            return false;
        }

        return true;
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            // Validate file size (max 5MB)
            if (file.Size > 5 * 1024 * 1024)
            {
                errorMessage = "File size must be less than 5MB.";
                return;
            }

            // Validate file type
            var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif", "application/pdf", 
                                     "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document" };
            if (!allowedTypes.Contains(file.ContentType))
            {
                errorMessage = "Please upload an image file (JPG, PNG, GIF) or document (PDF, DOC, DOCX).";
                return;
            }

            // In a real application, you would save the file to storage
            // For now, just store the filename
            accommodationForm.UploadedFileName = file.Name;
            errorMessage = string.Empty;
            StateHasChanged();
        }
    }
}