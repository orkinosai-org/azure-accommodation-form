@page "/application"
@page "/"
@using BlazorApp.Models
@using BlazorApp.Services
@using BlazorApp.Validation
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject IFormApiService FormApiService
@inject IJSRuntime JSRuntime

<PageTitle>Azure Accommodation Application Form</PageTitle>

<div style="padding: 20px; max-width: 800px; margin: 0 auto;">
    <h1>Azure Accommodation Application Form</h1>

    @if (currentStep == FormStep.EmailEntry)
    {
        <!-- Step 1: Email Entry -->
        <!-- Fix: Removed conflicting @oninput handlers that manually called NotifyFieldChanged().
             Now using only @bind-Value with automatic validation - errors clear as user types valid input. -->
        <div class="step-container">
            <h2>Step 1: Email Verification</h2>
            <p>Please enter your email address to begin the application process.</p>
            
            <EditForm Model="@emailModel" OnValidSubmit="@InitializeForm" OnInvalidSubmit="@HandleInvalidEmailSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                
                <div class="form-group">
                    <label for="email">Email Address *</label>
                    <InputText id="email" @bind-Value="emailModel.Email" class="form-control" type="email" placeholder="your.email@example.com" />
                    <ValidationMessage For="@(() => emailModel.Email)" />
                </div>
                
                <div class="form-group">
                    <label for="confirmEmail">Confirm Email Address *</label>
                    <InputText id="confirmEmail" @bind-Value="emailModel.ConfirmEmail" class="form-control" type="email" placeholder="Confirm your email" @oncontextmenu:preventDefault="true" />
                    <ValidationMessage For="@(() => emailModel.ConfirmEmail)" />
                </div>
                
                <div class="form-group">
                    <label for="captcha">Security Verification *</label>
                    <div class="captcha-container">
                        <div class="captcha-question">
                            <strong>@captchaQuestion</strong>
                        </div>
                        <InputNumber id="captcha" @bind-Value="emailModel.CaptchaAnswer" class="form-control" placeholder="Enter answer" />
                        <ValidationMessage For="@(() => emailModel.CaptchaAnswer)" />
                    </div>
                </div>
                
                <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <span>Processing...</span>
                    }
                    else
                    {
                        <span>Continue</span>
                    }
                </button>
            </EditForm>
        </div>
    }
    else if (currentStep == FormStep.EmailVerification)
    {
        <!-- Step 2: Email Verification -->
        <div class="step-container">
            <h2>Step 2: Email Verification</h2>
            <p>We've sent a verification code to <strong>@emailModel.Email</strong></p>
            <p>Please enter the 6-digit code below:</p>
            
            <EditForm Model="@verificationModel" OnValidSubmit="@VerifyEmail" FormName="EmailVerification">
                <DataAnnotationsValidator />
                <ValidationSummary />
                
                <div class="form-group">
                    <label for="token">Verification Code *</label>
                    <InputText id="token" @bind-Value="verificationModel.Token" class="form-control verification-code" placeholder="123456" maxlength="6" />
                    <ValidationMessage For="@(() => verificationModel.Token)" />
                </div>
                
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span>Verifying...</span>
                        }
                        else
                        {
                            <span>Verify Code</span>
                        }
                    </button>
                    
                    <button type="button" class="btn btn-secondary" @onclick="ResendVerification" disabled="@(isProcessing || resendCooldown > 0)">
                        @if (resendCooldown > 0)
                        {
                            <span>Resend in @resendCooldown s</span>
                        }
                        else
                        {
                            <span>Resend Code</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    }
    else if (currentStep == FormStep.FormFilling)
    {
        <!-- Step 3: Form Filling -->
        <div class="step-container">
            <div class="progress-indicator">
                <span>‚úÖ Email Verified</span> ‚Üí <span class="current-step">üìù Complete Form</span> ‚Üí <span>üìÑ Submit</span>
            </div>
            
            <EditForm Model="@formData" EditContext="@editContext" OnValidSubmit="@HandleSubmit" FormName="ApplicationForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <!-- 1. Tenant Details Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>1. Tenant Details</strong></legend>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="fullName">Full Name *</label>
                            <InputText id="fullName" @bind-Value="formData.TenantDetails.FullName" class="form-control" />
                            <ValidationMessage For="@(() => formData.TenantDetails.FullName)" />
                        </div>

                        <div class="form-group">
                            <label for="dateOfBirth">Date of Birth *</label>
                            <InputDate id="dateOfBirth" @bind-Value="formData.TenantDetails.DateOfBirth" class="form-control" />
                            <ValidationMessage For="@(() => formData.TenantDetails.DateOfBirth)" />
                        </div>

                        <div class="form-group">
                            <label for="placeOfBirth">Place of Birth</label>
                            <InputText id="placeOfBirth" @bind-Value="formData.TenantDetails.PlaceOfBirth" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="email">Email *</label>
                            <InputText id="email" @bind-Value="formData.TenantDetails.Email" class="form-control" type="email" readonly />
                            <ValidationMessage For="@(() => formData.TenantDetails.Email)" />
                        </div>

                        <div class="form-group">
                            <label for="telephone">Telephone *</label>
                            <InputText id="telephone" @bind-Value="formData.TenantDetails.Telephone" class="form-control" type="tel" />
                            <ValidationMessage For="@(() => formData.TenantDetails.Telephone)" />
                        </div>

                        <div class="form-group">
                            <label for="employersName">Employer's Name</label>
                            <InputText id="employersName" @bind-Value="formData.TenantDetails.EmployersName" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="gender">Gender</label>
                            <InputSelect id="gender" @bind-Value="formData.TenantDetails.Gender" class="form-control">
                                <option value="">Select Gender</option>
                                <option value="@Gender.Male">Male</option>
                                <option value="@Gender.Female">Female</option>
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label for="niNumber">NI Number</label>
                            <InputText id="niNumber" @bind-Value="formData.TenantDetails.NiNumber" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="roomOccupancy">Room Occupancy</label>
                            <InputSelect id="roomOccupancy" @bind-Value="formData.TenantDetails.RoomOccupancy" class="form-control">
                                <option value="">Select Occupancy</option>
                                <option value="@RoomOccupancy.JustYou">Just You</option>
                                <option value="@RoomOccupancy.YouAndSomeoneElse">You and Someone Else</option>
                            </InputSelect>
                        </div>
                    </div>

                    <div class="checkbox-group">
                        <div class="form-check">
                            <InputCheckbox id="car" @bind-Value="formData.TenantDetails.Car" class="form-check-input" />
                            <label for="car" class="form-check-label">Do you have a car?</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="bicycle" @bind-Value="formData.TenantDetails.Bicycle" class="form-check-input" />
                            <label for="bicycle" class="form-check-label">Do you have a bicycle?</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="rightToLive" @bind-Value="formData.TenantDetails.RightToLiveInUk" class="form-check-input" />
                            <label for="rightToLive" class="form-check-label">Do you have the right to live in the UK?</label>
                        </div>
                    </div>

                    <div class="conditional-group">
                        <div class="form-check">
                            <InputCheckbox id="hasOtherNames" @bind-Value="formData.TenantDetails.OtherNames.HasOtherNames" class="form-check-input" />
                            <label for="hasOtherNames" class="form-check-label">Have you been known by any other name?</label>
                        </div>
                        @if (formData.TenantDetails.OtherNames.HasOtherNames)
                        {
                            <InputText @bind-Value="formData.TenantDetails.OtherNames.Details" class="form-control" placeholder="Please specify" />
                        }
                    </div>

                    <div class="conditional-group">
                        <div class="form-check">
                            <InputCheckbox id="hasMedicalCondition" @bind-Value="formData.TenantDetails.MedicalCondition.HasCondition" class="form-check-input" />
                            <label for="hasMedicalCondition" class="form-check-label">Medical condition other residents need to know?</label>
                        </div>
                        @if (formData.TenantDetails.MedicalCondition.HasCondition)
                        {
                            <InputTextArea @bind-Value="formData.TenantDetails.MedicalCondition.Details" class="form-control" placeholder="Please specify" rows="3" />
                        }
                    </div>
                </fieldset>

                <!-- 2. Bank Details Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>2. Bank Details</strong></legend>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="bankName">Name of Bank</label>
                            <InputText id="bankName" @bind-Value="formData.BankDetails.BankName" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="bankPostcode">Postcode</label>
                            <InputText id="bankPostcode" @bind-Value="formData.BankDetails.Postcode" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="accountNo">Account No</label>
                            <InputText id="accountNo" @bind-Value="formData.BankDetails.AccountNo" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="sortCode">Sort Code</label>
                            <InputText id="sortCode" @bind-Value="formData.BankDetails.SortCode" class="form-control" />
                        </div>
                    </div>
                </fieldset>

                <!-- 3. Address History Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>3. Address History (Last 3 Years)</strong></legend>
                    
                    @for (int i = 0; i < formData.AddressHistory.Count; i++)
                    {
                        var index = i; // Capture loop variable
                        <div style="border: 1px solid #ddd; padding: 10px; margin-bottom: 10px; border-radius: 3px;">
                            <h4>Address @(index + 1) @(index == 0 ? "(Current)" : "")</h4>
                            
                            <div class="form-grid">
                                <div class="form-group" style="grid-column: span 2;">
                                    <label for="@($"address_{index}")">Address</label>
                                    <InputText id="@($"address_{index}")" @bind-Value="formData.AddressHistory[index].Address" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="@($"from_{index}")">From</label>
                                    <InputDate id="@($"from_{index}")" @bind-Value="formData.AddressHistory[index].From" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="@($"to_{index}")">To</label>
                                    <InputDate id="@($"to_{index}")" @bind-Value="formData.AddressHistory[index].To" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="@($"landlordName_{index}")">Landlord Name</label>
                                    <InputText id="@($"landlordName_{index}")" @bind-Value="formData.AddressHistory[index].LandlordName" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="@($"landlordTel_{index}")">Landlord Tel</label>
                                    <InputText id="@($"landlordTel_{index}")" @bind-Value="formData.AddressHistory[index].LandlordTel" class="form-control" type="tel" />
                                </div>

                                <div class="form-group" style="grid-column: span 2;">
                                    <label for="@($"landlordEmail_{index}")">Landlord Email</label>
                                    <InputText id="@($"landlordEmail_{index}")" @bind-Value="formData.AddressHistory[index].LandlordEmail" class="form-control" type="email" />
                                </div>
                            </div>

                            @if (index > 0)
                            {
                                <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveAddress(index)">Remove Address</button>
                            }
                        </div>
                    }
                    
                    @if (formData.AddressHistory.Count < 3)
                    {
                        <button type="button" class="btn btn-secondary" @onclick="AddAddress">Add Previous Address</button>
                    }
                </fieldset>

                <!-- 4. Contacts Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>4. Emergency Contacts</strong></legend>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="nextOfKin">Next of Kin</label>
                            <InputText id="nextOfKin" @bind-Value="formData.Contacts.NextOfKin" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="relationship">Relationship</label>
                            <InputText id="relationship" @bind-Value="formData.Contacts.Relationship" class="form-control" />
                        </div>

                        <div class="form-group" style="grid-column: span 2;">
                            <label for="contactAddress">Address</label>
                            <InputText id="contactAddress" @bind-Value="formData.Contacts.Address" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="contactNumber">Contact Number</label>
                            <InputText id="contactNumber" @bind-Value="formData.Contacts.ContactNumber" class="form-control" type="tel" />
                        </div>
                    </div>
                </fieldset>

                <!-- 5. Medical Details Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>5. Medical Details</strong></legend>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="gpPractice">GP Practice</label>
                            <InputText id="gpPractice" @bind-Value="formData.MedicalDetails.GpPractice" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="doctorName">Doctor's Name</label>
                            <InputText id="doctorName" @bind-Value="formData.MedicalDetails.DoctorName" class="form-control" />
                        </div>

                        <div class="form-group" style="grid-column: span 2;">
                            <label for="doctorAddress">Doctor's Address</label>
                            <InputText id="doctorAddress" @bind-Value="formData.MedicalDetails.DoctorAddress" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="doctorTelephone">Doctor's Telephone No</label>
                            <InputText id="doctorTelephone" @bind-Value="formData.MedicalDetails.DoctorTelephone" class="form-control" type="tel" />
                        </div>
                    </div>
                </fieldset>

                <!-- 6. Employment Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>6. Employment</strong></legend>
                    
                    <div class="form-grid">
                        <div class="form-group" style="grid-column: span 2;">
                            <label for="employerNameAddress">Name & Address of Employer</label>
                            <InputTextArea id="employerNameAddress" @bind-Value="formData.Employment.EmployerNameAddress" class="form-control" rows="3" />
                        </div>

                        <div class="form-group">
                            <label for="jobTitle">Job Title</label>
                            <InputText id="jobTitle" @bind-Value="formData.Employment.JobTitle" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="managerName">Manager's Name</label>
                            <InputText id="managerName" @bind-Value="formData.Employment.ManagerName" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="managerTel">Manager's Tel</label>
                            <InputText id="managerTel" @bind-Value="formData.Employment.ManagerTel" class="form-control" type="tel" />
                        </div>

                        <div class="form-group">
                            <label for="managerEmail">Manager's Email</label>
                            <InputText id="managerEmail" @bind-Value="formData.Employment.ManagerEmail" class="form-control" type="email" />
                        </div>

                        <div class="form-group">
                            <label for="dateOfEmployment">Date of Employment</label>
                            <InputDate id="dateOfEmployment" @bind-Value="formData.Employment.DateOfEmployment" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="presentSalary">Present Salary</label>
                            <InputText id="presentSalary" @bind-Value="formData.Employment.PresentSalary" class="form-control" />
                        </div>
                    </div>
                </fieldset>

                <!-- 7. Employment Change Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>7. Employment Change</strong></legend>
                    
                    <div class="form-group">
                        <label for="employmentChange">Are circumstances likely to change?</label>
                        <InputTextArea id="employmentChange" @bind-Value="formData.EmploymentChange" class="form-control" rows="3" />
                    </div>
                </fieldset>

                <!-- 8. Passport Details Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>8. Passport Details</strong></legend>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="passportNumber">Passport Number</label>
                            <InputText id="passportNumber" @bind-Value="formData.PassportDetails.PassportNumber" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="dateOfIssue">Date of Issue</label>
                            <InputDate id="dateOfIssue" @bind-Value="formData.PassportDetails.DateOfIssue" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="placeOfIssue">Place of Issue</label>
                            <InputText id="placeOfIssue" @bind-Value="formData.PassportDetails.PlaceOfIssue" class="form-control" />
                        </div>
                    </div>
                </fieldset>

                <!-- 9. Current Living Arrangement Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>9. Current Living Arrangement</strong></legend>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="noticeEndDate">Notice End Date</label>
                            <InputDate id="noticeEndDate" @bind-Value="formData.CurrentLivingArrangement.NoticeEndDate" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="reasonLeaving">Reason for Leaving</label>
                            <InputText id="reasonLeaving" @bind-Value="formData.CurrentLivingArrangement.ReasonLeaving" class="form-control" />
                        </div>
                    </div>

                    <div class="checkbox-group">
                        <div class="form-check">
                            <InputCheckbox id="landlordKnows" @bind-Value="formData.CurrentLivingArrangement.LandlordKnows" class="form-check-input" />
                            <label for="landlordKnows" class="form-check-label">Does landlord know you are leaving?</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="landlordReference" @bind-Value="formData.CurrentLivingArrangement.LandlordReference" class="form-check-input" />
                            <label for="landlordReference" class="form-check-label">Will landlord give reference?</label>
                        </div>
                    </div>

                    @if (formData.CurrentLivingArrangement.LandlordReference)
                    {
                        <div style="border: 1px solid #ddd; padding: 10px; margin-top: 10px; border-radius: 3px;">
                            <h4>Landlord Contact Details</h4>
                            <div class="form-grid">
                                <div class="form-group">
                                    <label for="landlordContactName">Name</label>
                                    <InputText id="landlordContactName" @bind-Value="formData.CurrentLivingArrangement.LandlordContact.Name" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="landlordContactTel">Tel</label>
                                    <InputText id="landlordContactTel" @bind-Value="formData.CurrentLivingArrangement.LandlordContact.Tel" class="form-control" type="tel" />
                                </div>

                                <div class="form-group" style="grid-column: span 2;">
                                    <label for="landlordContactAddress">Address</label>
                                    <InputText id="landlordContactAddress" @bind-Value="formData.CurrentLivingArrangement.LandlordContact.Address" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="landlordContactEmail">Email</label>
                                    <InputText id="landlordContactEmail" @bind-Value="formData.CurrentLivingArrangement.LandlordContact.Email" class="form-control" type="email" />
                                </div>
                            </div>
                        </div>
                    }
                </fieldset>

                <!-- 10. Other Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>10. Other</strong></legend>
                    
                    <div class="checkbox-group">
                        <div class="form-check">
                            <InputCheckbox id="smoke" @bind-Value="formData.Other.Smoke" class="form-check-input" />
                            <label for="smoke" class="form-check-label">Do you smoke?</label>
                        </div>
                    </div>

                    <div class="conditional-group">
                        <div class="form-check">
                            <InputCheckbox id="hasPets" @bind-Value="formData.Other.Pets.HasPets" class="form-check-input" />
                            <label for="hasPets" class="form-check-label">Do you have pets?</label>
                        </div>
                        @if (formData.Other.Pets.HasPets)
                        {
                            <InputTextArea @bind-Value="formData.Other.Pets.Details" class="form-control" placeholder="Please specify" rows="3" />
                        }
                    </div>

                    <div class="conditional-group">
                        <div class="form-check">
                            <InputCheckbox id="hasColiving" @bind-Value="formData.Other.Coliving.HasColiving" class="form-check-input" />
                            <label for="hasColiving" class="form-check-label">Co-living preferences?</label>
                        </div>
                        @if (formData.Other.Coliving.HasColiving)
                        {
                            <InputTextArea @bind-Value="formData.Other.Coliving.Details" class="form-control" placeholder="Please specify" rows="3" />
                        }
                    </div>
                </fieldset>

                <!-- 11. Occupation Agreement Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>11. Occupation Agreement</strong></legend>
                    
                    <div class="checkbox-group">
                        <div class="form-check">
                            <InputCheckbox id="singleOccupancyAgree" @bind-Value="formData.OccupationAgreement.SingleOccupancyAgree" class="form-check-input" />
                            <label for="singleOccupancyAgree" class="form-check-label">I agree to single occupancy terms</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="hmoTermsAgree" @bind-Value="formData.OccupationAgreement.HmoTermsAgree" class="form-check-input" />
                            <label for="hmoTermsAgree" class="form-check-label">I agree to HMO terms and conditions</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="noUnlistedOccupants" @bind-Value="formData.OccupationAgreement.NoUnlistedOccupants" class="form-check-input" />
                            <label for="noUnlistedOccupants" class="form-check-label">I will not allow unlisted occupants</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="noSmoking" @bind-Value="formData.OccupationAgreement.NoSmoking" class="form-check-input" />
                            <label for="noSmoking" class="form-check-label">I agree to no smoking policy</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="kitchenCookingOnly" @bind-Value="formData.OccupationAgreement.KitchenCookingOnly" class="form-check-input" />
                            <label for="kitchenCookingOnly" class="form-check-label">I agree to use kitchen for cooking only</label>
                        </div>
                    </div>
                </fieldset>

                <!-- 12. Consent & Declaration Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>12. Consent & Declaration</strong></legend>
                    
                    <div class="form-group">
                        <div class="form-check">
                            <InputCheckbox id="consentGiven" @bind-Value="formData.ConsentAndDeclaration.ConsentGiven" class="form-check-input" />
                            <label for="consentGiven" class="form-check-label">I consent to the processing of my personal data</label>
                        </div>
                    </div>

                    <div class="form-grid">
                        <div class="form-group">
                            <label for="signature">Signature</label>
                            <InputText id="signature" @bind-Value="formData.ConsentAndDeclaration.Signature" class="form-control" placeholder="Type your full name" />
                        </div>

                        <div class="form-group">
                            <label for="consentDate">Date</label>
                            <InputDate id="consentDate" @bind-Value="formData.ConsentAndDeclaration.Date" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="printName">Print Name</label>
                            <InputText id="printName" @bind-Value="formData.ConsentAndDeclaration.PrintName" class="form-control" />
                        </div>
                    </div>

                    <div class="checkbox-group">
                        <div class="form-check">
                            <InputCheckbox id="mainHome" @bind-Value="formData.ConsentAndDeclaration.Declaration.MainHome" class="form-check-input" />
                            <label for="mainHome" class="form-check-label">This will be my main home</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="enquiriesPermission" @bind-Value="formData.ConsentAndDeclaration.Declaration.EnquiriesPermission" class="form-check-input" />
                            <label for="enquiriesPermission" class="form-check-label">I give permission for enquiries to be made</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="certifyNoJudgements" @bind-Value="formData.ConsentAndDeclaration.Declaration.CertifyNoJudgements" class="form-check-input" />
                            <label for="certifyNoJudgements" class="form-check-label">I certify no outstanding county court judgements</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="certifyNoHousingDebt" @bind-Value="formData.ConsentAndDeclaration.Declaration.CertifyNoHousingDebt" class="form-check-input" />
                            <label for="certifyNoHousingDebt" class="form-check-label">I certify no housing-related debt</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="certifyNoLandlordDebt" @bind-Value="formData.ConsentAndDeclaration.Declaration.CertifyNoLandlordDebt" class="form-check-input" />
                            <label for="certifyNoLandlordDebt" class="form-check-label">I certify no debt to previous landlords</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="certifyNoAbuse" @bind-Value="formData.ConsentAndDeclaration.Declaration.CertifyNoAbuse" class="form-check-input" />
                            <label for="certifyNoAbuse" class="form-check-label">I certify no history of property abuse</label>
                        </div>
                    </div>

                    <div class="form-grid">
                        <div class="form-group">
                            <label for="declarationSignature">Declaration Signature</label>
                            <InputText id="declarationSignature" @bind-Value="formData.ConsentAndDeclaration.DeclarationSignature" class="form-control" placeholder="Type your full name" />
                        </div>

                        <div class="form-group">
                            <label for="declarationDate">Declaration Date</label>
                            <InputDate id="declarationDate" @bind-Value="formData.ConsentAndDeclaration.DeclarationDate" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="declarationPrintName">Declaration Print Name</label>
                            <InputText id="declarationPrintName" @bind-Value="formData.ConsentAndDeclaration.DeclarationPrintName" class="form-control" />
                        </div>
                    </div>
                </fieldset>

                <button type="submit" class="btn btn-success btn-lg" disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <span>Submitting...</span>
                    }
                    else
                    {
                        <span>Submit Application</span>
                    }
                </button>
            </EditForm>
        </div>
    }

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert @(isError ? "alert-danger" : "alert-success") mt-3">
            <p>@statusMessage</p>
        </div>
    }

    @if (showSuccess)
    {
        <div class="alert alert-success mt-3">
            <h4>Success!</h4>
            <p>Your accommodation application has been submitted successfully!</p>
            <p><strong>Submission ID:</strong> @currentSubmissionId</p>
            <p>You should receive a confirmation email shortly with your completed application form attached.</p>
        </div>
    }
</div>

<style>
    .step-container {
        background: #f8f9fa;
        padding: 30px;
        border-radius: 8px;
        margin-bottom: 20px;
        border: 1px solid #e9ecef;
    }

    .progress-indicator {
        text-align: center;
        margin-bottom: 30px;
        font-size: 18px;
    }

    .current-step {
        font-weight: bold;
        color: #007acc;
    }

    .verification-code {
        font-size: 24px;
        text-align: center;
        font-family: monospace;
        letter-spacing: 0.2em;
    }

    .form-actions {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 10px;
        margin-bottom: 10px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    .form-control {
        width: 100%;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 3px;
    }

    .checkbox-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
        margin: 10px 0;
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 8px;
        margin: 5px 0;
    }

    .conditional-group {
        margin: 10px 0;
    }

    .conditional-group input[type="text"],
    .conditional-group textarea {
        margin-top: 5px;
    }

    .captcha-container {
        margin: 10px 0;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    .captcha-question {
        margin-bottom: 10px;
        font-size: 16px;
        color: #333;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        font-weight: 500;
    }

    .btn-primary {
        background-color: #007acc;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

    .btn-lg {
        padding: 12px 24px;
        font-size: 16px;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .alert {
        padding: 15px;
        border: 1px solid transparent;
        border-radius: 4px;
    }

    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .mt-3 {
        margin-top: 1rem;
    }

    label {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .validation-message {
        color: #dc3545;
        font-size: 0.875em;
        margin-top: 5px;
    }

    .validation-summary {
        color: #dc3545;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 4px;
        padding: 10px;
        margin-bottom: 15px;
    }

    .validation-summary ul {
        margin: 0;
        padding-left: 20px;
    }
</style>

<script>
    window.disablePaste = (element) => {
        element.addEventListener('paste', function(e) {
            e.preventDefault();
            return false;
        });
        element.addEventListener('contextmenu', function(e) {
            e.preventDefault();
            return false;
        });
    };
    
    window.initializeConfirmEmailField = () => {
        const confirmEmailField = document.getElementById('confirmEmail');
        if (confirmEmailField) {
            window.disablePaste(confirmEmailField);
        }
    };
</script>

@code {
    private FormData formData = new();
    private EmailEntryModel emailModel = new();
    private EmailVerificationModel verificationModel = new();
    private EditContext editContext = default!;

    
    private FormStep currentStep = FormStep.EmailEntry;
    private bool isProcessing = false;
    private bool showSuccess = false;
    private bool isError = false;
    private string statusMessage = string.Empty;
    private string currentSubmissionId = string.Empty;
    private int resendCooldown = 0;
    private System.Threading.Timer? resendTimer;
    
    // CAPTCHA functionality
    private string captchaQuestion = string.Empty;
    private int captchaAnswer = 0;
    
    // Validation state tracking - removed hasAttemptedSubmit as no longer needed

    public enum FormStep
    {
        EmailEntry,
        EmailVerification,
        FormFilling
    }

    protected override void OnInitialized()
    {
        editContext = new EditContext(formData);
        GenerateNewCaptcha();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && currentStep == FormStep.EmailEntry)
        {
            await Task.Delay(100); // Small delay to ensure DOM is ready
            try
            {
                await JSRuntime.InvokeVoidAsync("initializeConfirmEmailField");
            }
            catch
            {
                // Ignore JavaScript errors in case the method isn't available
            }
        }
    }

    private void HandleInvalidEmailSubmit()
    {
        // This method is called when validation fails on the email form
        // The ValidationSummary and ValidationMessage components will automatically display errors
        // No additional action needed - just let the validation UI update
    }

    private async Task InitializeForm()
    {
        // Validate CAPTCHA
        if (emailModel.CaptchaAnswer != captchaAnswer)
        {
            ShowError("Security verification failed. Please try again.");
            GenerateNewCaptcha(); // Generate new CAPTCHA on failure
            return;
        }

        isProcessing = true;
        statusMessage = string.Empty;
        StateHasChanged();

        try
        {
            var response = await FormApiService.InitializeFormAsync(emailModel.Email);
            
            if (response.Success)
            {
                currentSubmissionId = response.SubmissionId;
                formData.TenantDetails.Email = emailModel.Email; // Pre-fill email in form
                
                // Send verification email
                var emailResponse = await FormApiService.SendEmailVerificationAsync(currentSubmissionId, emailModel.Email);
                
                if (emailResponse.Success)
                {
                    currentStep = FormStep.EmailVerification;
                    ShowSuccess($"Verification code sent to {emailModel.Email}");
                }
                else
                {
                    ShowError(emailResponse.Message);
                }
            }
            else
            {
                ShowError(response.Message);
            }
        }
        catch (Exception ex)
        {
            ShowError("An error occurred. Please try again.");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task VerifyEmail()
    {
        isProcessing = true;
        statusMessage = string.Empty;
        StateHasChanged();

        try
        {
            var response = await FormApiService.VerifyEmailTokenAsync(currentSubmissionId, verificationModel.Token);
            
            if (response.Success)
            {
                currentStep = FormStep.FormFilling;
                ShowSuccess("Email verified successfully! You can now complete the form.");
            }
            else
            {
                ShowError(response.Message);
            }
        }
        catch (Exception ex)
        {
            ShowError("An error occurred during verification. Please try again.");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ResendVerification()
    {
        if (resendCooldown > 0) return;

        isProcessing = true;
        StateHasChanged();

        try
        {
            var response = await FormApiService.SendEmailVerificationAsync(currentSubmissionId, emailModel.Email);
            
            if (response.Success)
            {
                ShowSuccess("Verification code sent again.");
                StartResendCooldown();
            }
            else
            {
                ShowError(response.Message);
            }
        }
        catch (Exception ex)
        {
            ShowError("Failed to resend verification code.");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task HandleSubmit(EditContext context)
    {
        Console.WriteLine("HandleSubmit fired");
        if (!context.Validate())
        {
            // Validation errors will be automatically displayed
            return;
        }

        isProcessing = true;
        statusMessage = string.Empty;
        StateHasChanged();

        try
        {
            var response = await FormApiService.SubmitFormAsync(currentSubmissionId, formData);
            
            if (response.Success)
            {
                showSuccess = true;
                ShowSuccess("Form submitted successfully!");
            }
            else
            {
                ShowError(response.Message);
            }
        }
        catch (Exception ex)
        {
            ShowError("An error occurred while submitting the form. Please try again.");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void ShowSuccess(string message)
    {
        statusMessage = message;
        isError = false;
    }

    private void ShowError(string message)
    {
        statusMessage = message;
        isError = true;
    }

    private void StartResendCooldown()
    {
        resendCooldown = 60; // 60 seconds cooldown
        resendTimer = new System.Threading.Timer(UpdateResendCooldown, null, 0, 1000);
    }

    private void UpdateResendCooldown(object? state)
    {
        if (resendCooldown > 0)
        {
            resendCooldown--;
            InvokeAsync(StateHasChanged);
        }
        else
        {
            resendTimer?.Dispose();
            resendTimer = null;
        }
    }

    public void Dispose()
    {
        resendTimer?.Dispose();
    }

    private void AddAddress()
    {
        if (formData.AddressHistory.Count < 3)
        {
            formData.AddressHistory.Add(new AddressHistoryItem());
        }
    }

    private void RemoveAddress(int index)
    {
        if (index > 0 && index < formData.AddressHistory.Count)
        {
            formData.AddressHistory.RemoveAt(index);
        }
    }
    
    private void GenerateNewCaptcha()
    {
        var random = new Random();
        int num1 = random.Next(1, 20);
        int num2 = random.Next(1, 20);
        
        captchaAnswer = num1 + num2;
        captchaQuestion = $"What is {num1} + {num2}?";
    }

    // Models for form steps
    public class EmailEntryModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        [EmailEquality(nameof(Email), ErrorMessage = "Email addresses do not match.")]
        public string ConfirmEmail { get; set; } = string.Empty;

        [Required]
        [Range(1, 100, ErrorMessage = "Please answer the security question correctly.")]
        public int? CaptchaAnswer { get; set; }
    }

    public class EmailVerificationModel
    {
        [Required]
        [StringLength(6, MinimumLength = 5)]
        [RegularExpression(@"^\d+$", ErrorMessage = "Please enter a valid numeric code")]
        public string Token { get; set; } = string.Empty;
    }
}