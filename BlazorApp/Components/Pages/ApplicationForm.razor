@page "/application"
@page "/"
@rendermode InteractiveServer
@using BlazorApp.Models
@using BlazorApp.Services
@using BlazorApp.Validation
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject IFormApiService FormApiService
@inject IJSRuntime JSRuntime

<PageTitle>Azure Accommodation Application Form</PageTitle>

<div style="padding: 20px; max-width: 800px; margin: 0 auto;">
    <h1>Azure Accommodation Application Form</h1>

    @if (currentStep == FormStep.EmailEntry)
    {
        <!-- Step 1: Email Entry -->
        <div class="step-container">
            <h2>Step 1: Email Verification</h2>
            <p>Please enter your email address to begin the application process.</p>
            
            <EditForm Model="@emailModel" OnSubmit="@InitializeForm" FormName="EmailEntry">
                
                <div class="form-group">
                    <label for="email">Email Address *</label>
                    <InputText id="email" @bind-Value="emailModel.Email" class="form-control" type="email" placeholder="your.email@example.com" />
                    @if (emailSubmitAttempted && !IsValidEmail(emailModel.Email))
                    {
                        <div class="validation-message">The Email field is required.</div>
                    }
                    else if (emailSubmitAttempted && !string.IsNullOrEmpty(emailModel.Email) && !IsValidEmailFormat(emailModel.Email))
                    {
                        <div class="validation-message">The Email field is not a valid e-mail address.</div>
                    }
                </div>
                
                <div class="form-group">
                    <label for="confirmEmail">Confirm Email Address *</label>
                    <InputText id="confirmEmail" @bind-Value="emailModel.ConfirmEmail" class="form-control" type="email" placeholder="Confirm your email" @oncontextmenu:preventDefault="true" />
                    @if (emailSubmitAttempted && !IsValidEmail(emailModel.ConfirmEmail))
                    {
                        <div class="validation-message">The ConfirmEmail field is required.</div>
                    }
                    else if (emailSubmitAttempted && !string.IsNullOrEmpty(emailModel.ConfirmEmail) && !IsValidEmailFormat(emailModel.ConfirmEmail))
                    {
                        <div class="validation-message">The ConfirmEmail field is not a valid e-mail address.</div>
                    }
                    else if (emailSubmitAttempted && !string.IsNullOrEmpty(emailModel.Email) && !string.IsNullOrEmpty(emailModel.ConfirmEmail) && emailModel.Email != emailModel.ConfirmEmail)
                    {
                        <div class="validation-message">Email addresses do not match.</div>
                    }
                </div>
                
                <div class="form-group">
                    <label for="captcha">Security Verification *</label>
                    <div class="captcha-container">
                        <div class="captcha-question">
                            <strong>@captchaQuestion</strong>
                        </div>
                        <InputNumber id="captcha" @bind-Value="emailModel.CaptchaAnswer" class="form-control" placeholder="Enter answer" />
                        @if (emailSubmitAttempted && (!emailModel.CaptchaAnswer.HasValue || emailModel.CaptchaAnswer.Value < 1 || emailModel.CaptchaAnswer.Value > 100))
                        {
                            <div class="validation-message">Please answer the security question correctly.</div>
                        }
                    </div>
                </div>
                
                <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <span>Processing...</span>
                    }
                    else
                    {
                        <span>Continue</span>
                    }
                </button>
            </EditForm>
        </div>
    }
    else if (currentStep == FormStep.EmailVerification)
    {
        <!-- Step 2: Email Verification -->
        <div class="step-container">
            <h2>Step 2: Email Verification</h2>
            <p>We've sent a verification code to <strong>@emailModel.Email</strong></p>
            <p>Please enter the 6-digit code below:</p>
            
            <EditForm Model="@verificationModel" OnValidSubmit="@VerifyEmail" FormName="EmailVerification">
                <DataAnnotationsValidator />
                <ValidationSummary />
                
                <div class="form-group">
                    <label for="token">Verification Code *</label>
                    <InputText id="token" @bind-Value="verificationModel.Token" class="form-control verification-code" placeholder="123456" maxlength="6" />
                    <ValidationMessage For="@(() => verificationModel.Token)" />
                </div>
                
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span>Verifying...</span>
                        }
                        else
                        {
                            <span>Verify Code</span>
                        }
                    </button>
                    
                    <button type="button" class="btn btn-secondary" @onclick="ResendVerification" disabled="@(isProcessing || resendCooldown > 0)">
                        @if (resendCooldown > 0)
                        {
                            <span>Resend in @resendCooldown s</span>
                        }
                        else
                        {
                            <span>Resend Code</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    }
    else if (currentStep == FormStep.FormFilling)
    {
        <!-- Step 3: Form Filling -->
        <div class="step-container">
            <div class="progress-indicator">
                <span>‚úÖ Email Verified</span> ‚Üí <span class="current-step">üìù Complete Form</span> ‚Üí <span>üìÑ Submit</span>
            </div>
            
            <EditForm EditContext="@editContext" FormName="ApplicationForm" Enhance="false">
                <DataAnnotationsValidator />
                
                <!-- Enhanced Validation Summary with Debug Info -->
                @if (developmentMode && editContext.GetValidationMessages().Any())
                {
                    <div class="alert alert-danger mt-3" style="border: 2px solid #dc3545;">
                        <h5>‚ö†Ô∏è Validation Errors (Development Mode)</h5>
                        <p><strong>Form cannot be submitted until these errors are resolved:</strong></p>
                        <ul>
                            @foreach (var message in editContext.GetValidationMessages())
                            {
                                <li>@message</li>
                            }
                        </ul>
                        <hr>
                        <p><small><strong>Debug:</strong> Use the "üîß Force Submit (Dev Mode)" button below to bypass validation for testing.</small></p>
                    </div>
                }
                <ValidationSummary />

                <!-- 1. Tenant Details Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>1. Tenant Details</strong></legend>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="fullName">Full Name *</label>
                            <InputText id="fullName" @bind-Value="formData.TenantDetails.FullName" class="form-control" />
                            <ValidationMessage For="@(() => formData.TenantDetails.FullName)" />
                        </div>

                        <div class="form-group">
                            <label for="dateOfBirth">Date of Birth *</label>
                            <InputDate id="dateOfBirth" @bind-Value="formData.TenantDetails.DateOfBirth" class="form-control" />
                            <ValidationMessage For="@(() => formData.TenantDetails.DateOfBirth)" />
                        </div>

                        <div class="form-group">
                            <label for="placeOfBirth">Place of Birth</label>
                            <InputText id="placeOfBirth" @bind-Value="formData.TenantDetails.PlaceOfBirth" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="email">Email *</label>
                            <InputText id="email" @bind-Value="formData.TenantDetails.Email" class="form-control" type="email" readonly />
                            <ValidationMessage For="@(() => formData.TenantDetails.Email)" />
                        </div>

                        <div class="form-group">
                            <label for="telephone">Telephone *</label>
                            <InputText id="telephone" @bind-Value="formData.TenantDetails.Telephone" class="form-control" type="tel" />
                            <ValidationMessage For="@(() => formData.TenantDetails.Telephone)" />
                        </div>

                        <div class="form-group">
                            <label for="employersName">Employer's Name</label>
                            <InputText id="employersName" @bind-Value="formData.TenantDetails.EmployersName" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="gender">Gender</label>
                            <InputSelect id="gender" @bind-Value="formData.TenantDetails.Gender" class="form-control">
                                <option value="">Select Gender</option>
                                <option value="@Gender.Male">Male</option>
                                <option value="@Gender.Female">Female</option>
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label for="niNumber">NI Number</label>
                            <InputText id="niNumber" @bind-Value="formData.TenantDetails.NiNumber" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="roomOccupancy">Room Occupancy</label>
                            <InputSelect id="roomOccupancy" @bind-Value="formData.TenantDetails.RoomOccupancy" class="form-control">
                                <option value="">Select Occupancy</option>
                                <option value="@RoomOccupancy.JustYou">Just You</option>
                                <option value="@RoomOccupancy.YouAndSomeoneElse">You and Someone Else</option>
                            </InputSelect>
                        </div>
                    </div>

                    <div class="checkbox-group">
                        <div class="form-check">
                            <InputCheckbox id="car" @bind-Value="formData.TenantDetails.Car" class="form-check-input" />
                            <label for="car" class="form-check-label">Do you have a car?</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="bicycle" @bind-Value="formData.TenantDetails.Bicycle" class="form-check-input" />
                            <label for="bicycle" class="form-check-label">Do you have a bicycle?</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="rightToLive" @bind-Value="formData.TenantDetails.RightToLiveInUk" class="form-check-input" />
                            <label for="rightToLive" class="form-check-label">Do you have the right to live in the UK?</label>
                        </div>
                    </div>

                    <div class="conditional-group">
                        <div class="form-check">
                            <InputCheckbox id="hasOtherNames" @bind-Value="formData.TenantDetails.OtherNames.HasOtherNames" class="form-check-input" />
                            <label for="hasOtherNames" class="form-check-label">Have you been known by any other name?</label>
                        </div>
                        @if (formData.TenantDetails.OtherNames.HasOtherNames)
                        {
                            <InputText @bind-Value="formData.TenantDetails.OtherNames.Details" class="form-control" placeholder="Please specify" />
                        }
                    </div>

                    <div class="conditional-group">
                        <div class="form-check">
                            <InputCheckbox id="hasMedicalCondition" @bind-Value="formData.TenantDetails.MedicalCondition.HasCondition" class="form-check-input" />
                            <label for="hasMedicalCondition" class="form-check-label">Medical condition other residents need to know?</label>
                        </div>
                        @if (formData.TenantDetails.MedicalCondition.HasCondition)
                        {
                            <InputTextArea @bind-Value="formData.TenantDetails.MedicalCondition.Details" class="form-control" placeholder="Please specify" rows="3" />
                        }
                    </div>
                </fieldset>

                <!-- 2. Bank Details Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>2. Bank Details</strong></legend>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="bankName">Name of Bank</label>
                            <InputText id="bankName" @bind-Value="formData.BankDetails.BankName" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="bankPostcode">Postcode</label>
                            <InputText id="bankPostcode" @bind-Value="formData.BankDetails.Postcode" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="accountNo">Account No</label>
                            <InputText id="accountNo" @bind-Value="formData.BankDetails.AccountNo" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="sortCode">Sort Code</label>
                            <InputText id="sortCode" @bind-Value="formData.BankDetails.SortCode" class="form-control" />
                        </div>
                    </div>
                </fieldset>

                <!-- 3. Address History Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>3. Address History (Last 3 Years)</strong></legend>
                    
                    @for (int i = 0; i < formData.AddressHistory.Count; i++)
                    {
                        var index = i; // Capture loop variable
                        <div style="border: 1px solid #ddd; padding: 10px; margin-bottom: 10px; border-radius: 3px;">
                            <h4>Address @(index + 1) @(index == 0 ? "(Current)" : "")</h4>
                            
                            <div class="form-grid">
                                <div class="form-group" style="grid-column: span 2;">
                                    <label for="@($"address_{index}")">Address</label>
                                    <InputText id="@($"address_{index}")" @bind-Value="formData.AddressHistory[index].Address" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="@($"from_{index}")">From</label>
                                    <InputDate id="@($"from_{index}")" @bind-Value="formData.AddressHistory[index].From" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="@($"to_{index}")">To</label>
                                    <InputDate id="@($"to_{index}")" @bind-Value="formData.AddressHistory[index].To" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="@($"landlordName_{index}")">Landlord Name</label>
                                    <InputText id="@($"landlordName_{index}")" @bind-Value="formData.AddressHistory[index].LandlordName" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="@($"landlordTel_{index}")">Landlord Tel</label>
                                    <InputText id="@($"landlordTel_{index}")" @bind-Value="formData.AddressHistory[index].LandlordTel" class="form-control" type="tel" />
                                </div>

                                <div class="form-group" style="grid-column: span 2;">
                                    <label for="@($"landlordEmail_{index}")">Landlord Email</label>
                                    <InputText id="@($"landlordEmail_{index}")" @bind-Value="formData.AddressHistory[index].LandlordEmail" class="form-control" type="email" />
                                </div>
                            </div>

                            @if (index > 0)
                            {
                                <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveAddress(index)">Remove Address</button>
                            }
                        </div>
                    }
                    
                    @if (formData.AddressHistory.Count < 3)
                    {
                        <button type="button" class="btn btn-secondary" @onclick="AddAddress">Add Previous Address</button>
                    }
                </fieldset>

                <!-- 4. Contacts Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>4. Emergency Contacts</strong></legend>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="nextOfKin">Next of Kin</label>
                            <InputText id="nextOfKin" @bind-Value="formData.Contacts.NextOfKin" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="relationship">Relationship</label>
                            <InputText id="relationship" @bind-Value="formData.Contacts.Relationship" class="form-control" />
                        </div>

                        <div class="form-group" style="grid-column: span 2;">
                            <label for="contactAddress">Address</label>
                            <InputText id="contactAddress" @bind-Value="formData.Contacts.Address" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="contactNumber">Contact Number</label>
                            <InputText id="contactNumber" @bind-Value="formData.Contacts.ContactNumber" class="form-control" type="tel" />
                        </div>
                    </div>
                </fieldset>

                <!-- 5. Medical Details Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>5. Medical Details</strong></legend>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="gpPractice">GP Practice</label>
                            <InputText id="gpPractice" @bind-Value="formData.MedicalDetails.GpPractice" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="doctorName">Doctor's Name</label>
                            <InputText id="doctorName" @bind-Value="formData.MedicalDetails.DoctorName" class="form-control" />
                        </div>

                        <div class="form-group" style="grid-column: span 2;">
                            <label for="doctorAddress">Doctor's Address</label>
                            <InputText id="doctorAddress" @bind-Value="formData.MedicalDetails.DoctorAddress" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="doctorTelephone">Doctor's Telephone No</label>
                            <InputText id="doctorTelephone" @bind-Value="formData.MedicalDetails.DoctorTelephone" class="form-control" type="tel" />
                        </div>
                    </div>
                </fieldset>

                <!-- 6. Employment Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>6. Employment</strong></legend>
                    
                    <div class="form-grid">
                        <div class="form-group" style="grid-column: span 2;">
                            <label for="employerNameAddress">Name & Address of Employer</label>
                            <InputTextArea id="employerNameAddress" @bind-Value="formData.Employment.EmployerNameAddress" class="form-control" rows="3" />
                        </div>

                        <div class="form-group">
                            <label for="jobTitle">Job Title</label>
                            <InputText id="jobTitle" @bind-Value="formData.Employment.JobTitle" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="managerName">Manager's Name</label>
                            <InputText id="managerName" @bind-Value="formData.Employment.ManagerName" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="managerTel">Manager's Tel</label>
                            <InputText id="managerTel" @bind-Value="formData.Employment.ManagerTel" class="form-control" type="tel" />
                        </div>

                        <div class="form-group">
                            <label for="managerEmail">Manager's Email</label>
                            <InputText id="managerEmail" @bind-Value="formData.Employment.ManagerEmail" class="form-control" type="email" />
                        </div>

                        <div class="form-group">
                            <label for="dateOfEmployment">Date of Employment</label>
                            <InputDate id="dateOfEmployment" @bind-Value="formData.Employment.DateOfEmployment" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="presentSalary">Present Salary</label>
                            <InputText id="presentSalary" @bind-Value="formData.Employment.PresentSalary" class="form-control" />
                        </div>
                    </div>
                </fieldset>

                <!-- 7. Employment Change Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>7. Employment Change</strong></legend>
                    
                    <div class="form-group">
                        <label for="employmentChange">Are circumstances likely to change?</label>
                        <InputTextArea id="employmentChange" @bind-Value="formData.EmploymentChange" class="form-control" rows="3" />
                    </div>
                </fieldset>

                <!-- 8. Passport Details Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>8. Passport Details</strong></legend>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="passportNumber">Passport Number</label>
                            <InputText id="passportNumber" @bind-Value="formData.PassportDetails.PassportNumber" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="dateOfIssue">Date of Issue</label>
                            <InputDate id="dateOfIssue" @bind-Value="formData.PassportDetails.DateOfIssue" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="placeOfIssue">Place of Issue</label>
                            <InputText id="placeOfIssue" @bind-Value="formData.PassportDetails.PlaceOfIssue" class="form-control" />
                        </div>
                    </div>
                </fieldset>

                <!-- 9. Current Living Arrangement Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>9. Current Living Arrangement</strong></legend>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="noticeEndDate">Notice End Date</label>
                            <InputDate id="noticeEndDate" @bind-Value="formData.CurrentLivingArrangement.NoticeEndDate" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="reasonLeaving">Reason for Leaving</label>
                            <InputText id="reasonLeaving" @bind-Value="formData.CurrentLivingArrangement.ReasonLeaving" class="form-control" />
                        </div>
                    </div>

                    <div class="checkbox-group">
                        <div class="form-check">
                            <InputCheckbox id="landlordKnows" @bind-Value="formData.CurrentLivingArrangement.LandlordKnows" class="form-check-input" />
                            <label for="landlordKnows" class="form-check-label">Does landlord know you are leaving?</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="landlordReference" @bind-Value="formData.CurrentLivingArrangement.LandlordReference" class="form-check-input" />
                            <label for="landlordReference" class="form-check-label">Will landlord give reference?</label>
                        </div>
                    </div>

                    @if (formData.CurrentLivingArrangement.LandlordReference)
                    {
                        <div style="border: 1px solid #ddd; padding: 10px; margin-top: 10px; border-radius: 3px;">
                            <h4>Landlord Contact Details</h4>
                            <div class="form-grid">
                                <div class="form-group">
                                    <label for="landlordContactName">Name</label>
                                    <InputText id="landlordContactName" @bind-Value="formData.CurrentLivingArrangement.LandlordContact.Name" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="landlordContactTel">Tel</label>
                                    <InputText id="landlordContactTel" @bind-Value="formData.CurrentLivingArrangement.LandlordContact.Tel" class="form-control" type="tel" />
                                </div>

                                <div class="form-group" style="grid-column: span 2;">
                                    <label for="landlordContactAddress">Address</label>
                                    <InputText id="landlordContactAddress" @bind-Value="formData.CurrentLivingArrangement.LandlordContact.Address" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="landlordContactEmail">Email</label>
                                    <InputText id="landlordContactEmail" @bind-Value="formData.CurrentLivingArrangement.LandlordContact.Email" class="form-control" type="email" />
                                </div>
                            </div>
                        </div>
                    }
                </fieldset>

                <!-- 10. Other Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>10. Other</strong></legend>
                    
                    <div class="checkbox-group">
                        <div class="form-check">
                            <InputCheckbox id="smoke" @bind-Value="formData.Other.Smoke" class="form-check-input" />
                            <label for="smoke" class="form-check-label">Do you smoke?</label>
                        </div>
                    </div>

                    <div class="conditional-group">
                        <div class="form-check">
                            <InputCheckbox id="hasPets" @bind-Value="formData.Other.Pets.HasPets" class="form-check-input" />
                            <label for="hasPets" class="form-check-label">Do you have pets?</label>
                        </div>
                        @if (formData.Other.Pets.HasPets)
                        {
                            <InputTextArea @bind-Value="formData.Other.Pets.Details" class="form-control" placeholder="Please specify" rows="3" />
                        }
                    </div>

                    <div class="conditional-group">
                        <div class="form-check">
                            <InputCheckbox id="hasColiving" @bind-Value="formData.Other.Coliving.HasColiving" class="form-check-input" />
                            <label for="hasColiving" class="form-check-label">Co-living preferences?</label>
                        </div>
                        @if (formData.Other.Coliving.HasColiving)
                        {
                            <InputTextArea @bind-Value="formData.Other.Coliving.Details" class="form-control" placeholder="Please specify" rows="3" />
                        }
                    </div>
                </fieldset>

                <!-- 11. Occupation Agreement Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>11. Occupation Agreement</strong></legend>
                    
                    <div class="checkbox-group">
                        <div class="form-check">
                            <InputCheckbox id="singleOccupancyAgree" @bind-Value="formData.OccupationAgreement.SingleOccupancyAgree" class="form-check-input" />
                            <label for="singleOccupancyAgree" class="form-check-label">I agree to single occupancy terms</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="hmoTermsAgree" @bind-Value="formData.OccupationAgreement.HmoTermsAgree" class="form-check-input" />
                            <label for="hmoTermsAgree" class="form-check-label">I agree to HMO terms and conditions</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="noUnlistedOccupants" @bind-Value="formData.OccupationAgreement.NoUnlistedOccupants" class="form-check-input" />
                            <label for="noUnlistedOccupants" class="form-check-label">I will not allow unlisted occupants</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="noSmoking" @bind-Value="formData.OccupationAgreement.NoSmoking" class="form-check-input" />
                            <label for="noSmoking" class="form-check-label">I agree to no smoking policy</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="kitchenCookingOnly" @bind-Value="formData.OccupationAgreement.KitchenCookingOnly" class="form-check-input" />
                            <label for="kitchenCookingOnly" class="form-check-label">I agree to use kitchen for cooking only</label>
                        </div>
                    </div>
                </fieldset>

                <!-- 12. Consent & Declaration Section -->
                <fieldset style="border: 1px solid #ccc; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                    <legend><strong>12. Consent & Declaration</strong></legend>
                    
                    <div class="form-group">
                        <div class="form-check">
                            <InputCheckbox id="consentGiven" @bind-Value="formData.ConsentAndDeclaration.ConsentGiven" class="form-check-input" />
                            <label for="consentGiven" class="form-check-label">I consent to the processing of my personal data</label>
                        </div>
                    </div>

                    <div class="form-grid">
                        <div class="form-group">
                            <label for="signature">Signature</label>
                            <InputText id="signature" @bind-Value="formData.ConsentAndDeclaration.Signature" class="form-control" placeholder="Type your full name" />
                        </div>

                        <div class="form-group">
                            <label for="consentDate">Date</label>
                            <InputDate id="consentDate" @bind-Value="formData.ConsentAndDeclaration.Date" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="printName">Print Name</label>
                            <InputText id="printName" @bind-Value="formData.ConsentAndDeclaration.PrintName" class="form-control" />
                        </div>
                    </div>

                    <div class="checkbox-group">
                        <div class="form-check">
                            <InputCheckbox id="mainHome" @bind-Value="formData.ConsentAndDeclaration.Declaration.MainHome" class="form-check-input" />
                            <label for="mainHome" class="form-check-label">This will be my main home</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="enquiriesPermission" @bind-Value="formData.ConsentAndDeclaration.Declaration.EnquiriesPermission" class="form-check-input" />
                            <label for="enquiriesPermission" class="form-check-label">I give permission for enquiries to be made</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="certifyNoJudgements" @bind-Value="formData.ConsentAndDeclaration.Declaration.CertifyNoJudgements" class="form-check-input" />
                            <label for="certifyNoJudgements" class="form-check-label">I certify no outstanding county court judgements</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="certifyNoHousingDebt" @bind-Value="formData.ConsentAndDeclaration.Declaration.CertifyNoHousingDebt" class="form-check-input" />
                            <label for="certifyNoHousingDebt" class="form-check-label">I certify no housing-related debt</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="certifyNoLandlordDebt" @bind-Value="formData.ConsentAndDeclaration.Declaration.CertifyNoLandlordDebt" class="form-check-input" />
                            <label for="certifyNoLandlordDebt" class="form-check-label">I certify no debt to previous landlords</label>
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="certifyNoAbuse" @bind-Value="formData.ConsentAndDeclaration.Declaration.CertifyNoAbuse" class="form-check-input" />
                            <label for="certifyNoAbuse" class="form-check-label">I certify no history of property abuse</label>
                        </div>
                    </div>

                    <div class="form-grid">
                        <div class="form-group">
                            <label for="declarationSignature">Declaration Signature</label>
                            <InputText id="declarationSignature" @bind-Value="formData.ConsentAndDeclaration.DeclarationSignature" class="form-control" placeholder="Type your full name" />
                        </div>

                        <div class="form-group">
                            <label for="declarationDate">Declaration Date</label>
                            <InputDate id="declarationDate" @bind-Value="formData.ConsentAndDeclaration.DeclarationDate" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="declarationPrintName">Declaration Print Name</label>
                            <InputText id="declarationPrintName" @bind-Value="formData.ConsentAndDeclaration.DeclarationPrintName" class="form-control" />
                        </div>
                    </div>
                </fieldset>

                <button type="button" @onclick="HandleSubmitWithValidation" class="btn btn-success btn-lg" disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <span>‚è≥ Submitting...</span>
                    }
                    else
                    {
                        <span>üìù Submit Application</span>
                    }
                </button>
                
                <!-- Alternative submit button that bypasses validation for development/testing -->
                @if (developmentMode)
                {
                    <div class="mt-3">
                        <button type="button" @onclick="@HandleSubmit" class="btn btn-warning btn-lg me-2" disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span>‚è≥ Submitting...</span>
                            }
                            else
                            {
                                <span>üîß Force Submit (Dev Mode)</span>
                            }
                        </button>
                        
                        <button type="button" @onclick="@FillTestData" class="btn btn-info btn-lg" disabled="@isProcessing">
                            <span>üìù Fill Test Data</span>
                        </button>
                        
                        <button type="button" @onclick="@ShowValidationErrors" class="btn btn-secondary btn-lg ms-2">
                            <span>üîç Check Validation</span>
                        </button>
                    </div>
                }
            </EditForm>
        </div>
    }

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert @(isError ? "alert-danger" : "alert-success") mt-3">
            <p>@statusMessage</p>
        </div>
    }

    @if (developmentMode && currentStep == FormStep.FormFilling)
    {
        <div class="alert alert-info mt-3" style="border: 2px solid #007acc; background-color: #e7f3ff; font-weight: bold;">
            <p><strong>üîß DEVELOPMENT MODE ACTIVE</strong></p>
            <p>Email verification bypassed. Debug output visible in browser console and server logs.</p>
        </div>
    }

    <!-- Enhanced Progress Tracking and Debug Information -->
    @if (isProcessing && currentStep == FormStep.FormFilling)
    {
        <div class="alert alert-info mt-3" style="border: 2px solid #28a745; background-color: #d4edda;">
            <h4>üîÑ Processing Your Application</h4>
            <div class="progress-steps">
                @foreach (var step in submissionProgress)
                {
                    <div class="progress-step @(step.Status == "completed" ? "completed" : step.Status == "processing" ? "processing" : "pending")">
                        <span class="step-icon">
                            @if (step.Status == "completed")
                            {
                                <text>‚úÖ</text>
                            }
                            else if (step.Status == "processing")
                            {
                                <text>‚è≥</text>
                            }
                            else if (step.Status == "failed")
                            {
                                <text>‚ùå</text>
                            }
                            else
                            {
                                <text>‚≠ï</text>
                            }
                        </span>
                        <span class="step-text">@step.Description</span>
                    </div>
                }
            </div>
            @if (!string.IsNullOrEmpty(currentProcessingStep))
            {
                <p class="mt-2"><strong>Current Step:</strong> @currentProcessingStep</p>
            }
        </div>
    }

    <!-- Debug Information Panel -->
    @if (developmentMode && debugMessages.Any())
    {
        <div class="alert alert-warning mt-3" style="border: 2px solid #ffc107; background-color: #fff3cd;">
            <h5>üîß Debug Information</h5>
            <div class="debug-panel" style="max-height: 300px; overflow-y: auto; font-family: monospace; font-size: 12px;">
                @foreach (var debug in debugMessages.TakeLast(20))
                {
                    <div class="debug-entry @debug.Level" style="margin: 2px 0; padding: 2px 5px; border-left: 3px solid @(debug.Level == "error" ? "#dc3545" : debug.Level == "warning" ? "#ffc107" : "#28a745");">
                        <span style="color: #666;">[@debug.Timestamp.ToString("HH:mm:ss")]</span>
                        <span>@debug.Message</span>
                    </div>
                }
            </div>
            <button type="button" class="btn btn-sm btn-outline-secondary mt-2" @onclick="ClearDebugMessages">Clear Debug Messages</button>
        </div>
    }

    @if (showSuccess)
    {
        <div class="alert alert-success mt-3" style="border: 2px solid #28a745; background-color: #d4edda; font-weight: bold;">
            <h4>‚úÖ Success!</h4>
            <p>Your accommodation application has been submitted successfully!</p>
            <p><strong>Submission ID:</strong> @currentSubmissionId</p>
            <p>You should receive a confirmation email shortly with your completed application form attached.</p>
            @if (developmentMode)
            {
                <hr>
                <h6>Debug Information:</h6>
                <ul style="font-size: 12px; font-family: monospace;">
                    <li>Submission Time: @DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")</li>
                    <li>Development Mode: @developmentMode</li>
                    <li>User Email: @formData.TenantDetails.Email</li>
                    <li>Form Valid: @editContext.IsModified()</li>
                </ul>
            }
        </div>
    }

    @if (hasSubmissionError)
    {
        <div class="alert alert-danger mt-3" style="border: 2px solid #dc3545; background-color: #f8d7da; font-weight: bold;">
            <h4>‚ùå Submission Failed</h4>
            <p>There was an error submitting your application. Please try again.</p>
            @if (!string.IsNullOrEmpty(submissionErrorDetails))
            {
                <p><strong>Error Details:</strong> @submissionErrorDetails</p>
            }
            @if (developmentMode)
            {
                <hr>
                <h6>Debug Information:</h6>
                <div style="font-size: 12px; font-family: monospace; white-space: pre-wrap;">@submissionErrorDetails</div>
            }
        </div>
    }
</div>

<style>
    .step-container {
        background: #f8f9fa;
        padding: 30px;
        border-radius: 8px;
        margin-bottom: 20px;
        border: 1px solid #e9ecef;
    }

    .progress-indicator {
        text-align: center;
        margin-bottom: 30px;
        font-size: 18px;
    }

    .current-step {
        font-weight: bold;
        color: #007acc;
    }

    .verification-code {
        font-size: 24px;
        text-align: center;
        font-family: monospace;
        letter-spacing: 0.2em;
    }

    .form-actions {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 10px;
        margin-bottom: 10px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    .form-control {
        width: 100%;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 3px;
    }

    .checkbox-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
        margin: 10px 0;
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 8px;
        margin: 5px 0;
    }

    .conditional-group {
        margin: 10px 0;
    }

    .conditional-group input[type="text"],
    .conditional-group textarea {
        margin-top: 5px;
    }

    .captcha-container {
        margin: 10px 0;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    .captcha-question {
        margin-bottom: 10px;
        font-size: 16px;
        color: #333;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        font-weight: 500;
    }

    .btn-primary {
        background-color: #007acc;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

    .btn-lg {
        padding: 12px 24px;
        font-size: 16px;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .alert {
        padding: 15px;
        border: 1px solid transparent;
        border-radius: 4px;
    }

    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .mt-3 {
        margin-top: 1rem;
    }

    label {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .validation-message {
        color: #dc3545;
        font-size: 0.875em;
        margin-top: 5px;
    }

    .validation-summary {
        color: #dc3545;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 4px;
        padding: 10px;
        margin-bottom: 15px;
    }

    .validation-summary ul {
        margin: 0;
        padding-left: 20px;
    }

    /* Progress tracking styles */
    .progress-steps {
        display: flex;
        flex-direction: column;
        gap: 8px;
        margin: 15px 0;
    }

    .progress-step {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 8px;
        border-radius: 4px;
        transition: all 0.3s ease;
    }

    .progress-step.pending {
        background-color: #f8f9fa;
        color: #6c757d;
    }

    .progress-step.processing {
        background-color: #fff3cd;
        color: #856404;
        animation: pulse 1.5s infinite;
    }

    .progress-step.completed {
        background-color: #d4edda;
        color: #155724;
    }

    .progress-step.failed {
        background-color: #f8d7da;
        color: #721c24;
    }

    .step-icon {
        font-size: 16px;
        width: 20px;
        text-align: center;
    }

    .step-text {
        font-weight: 500;
    }

    @@keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.6; }
        100% { opacity: 1; }
    }

    /* Debug panel styles */
    .debug-panel {
        border: 1px solid #ffc107;
        border-radius: 4px;
        background-color: #fffacd;
        padding: 10px;
    }

    .debug-entry {
        font-size: 11px;
        margin: 1px 0;
        word-wrap: break-word;
    }

    .debug-entry.error {
        background-color: rgba(220, 53, 69, 0.1);
    }

    .debug-entry.warning {
        background-color: rgba(255, 193, 7, 0.1);
    }

    .debug-entry.info {
        background-color: rgba(40, 167, 69, 0.1);
    }
</style>

<script>
    window.disablePaste = (element) => {
        element.addEventListener('paste', function(e) {
            e.preventDefault();
            return false;
        });
        element.addEventListener('contextmenu', function(e) {
            e.preventDefault();
            return false;
        });
    };
    
    window.initializeConfirmEmailField = () => {
        const confirmEmailField = document.getElementById('confirmEmail');
        if (confirmEmailField) {
            window.disablePaste(confirmEmailField);
        }
    };
</script>

@code {
    private FormData formData = new();
    private EmailEntryModel emailModel = new();
    private EmailVerificationModel verificationModel = new();
    private EditContext editContext = default!;

    
    private FormStep currentStep = FormStep.EmailEntry;
    private bool isProcessing = false;
    private bool showSuccess = false;
    private bool isError = false;
    private string statusMessage = string.Empty;
    private string currentSubmissionId = string.Empty;
    private int resendCooldown = 0;
    private System.Threading.Timer? resendTimer;
    
    // CAPTCHA functionality
    private string captchaQuestion = string.Empty;
    private int captchaAnswer = 0;
    
    // Email validation state tracking
    private bool emailSubmitAttempted = false;
    
    // PRODUCTION MODE: Validation is now enforced
    // Set to false to enable full validation and email verification in production
    // Set to true only for development/testing when email services are not configured
    private bool developmentMode = false;
    
    // Enhanced UI feedback and debugging
    private bool hasSubmissionError = false;
    private string submissionErrorDetails = string.Empty;
    private string currentProcessingStep = string.Empty;
    private List<SubmissionProgressStep> submissionProgress = new();
    private List<DebugMessage> debugMessages = new();

    public enum FormStep
    {
        EmailEntry,
        EmailVerification,
        FormFilling
    }

    protected override void OnInitialized()
    {
        editContext = new EditContext(formData);
        GenerateNewCaptcha();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && currentStep == FormStep.EmailEntry)
        {
            await Task.Delay(100); // Small delay to ensure DOM is ready
            try
            {
                await JSRuntime.InvokeVoidAsync("initializeConfirmEmailField");
            }
            catch
            {
                // Ignore JavaScript errors in case the method isn't available
            }
        }
    }

    private async Task InitializeForm(EditContext context)
    {
        // DEVELOPMENT/TESTING WORKAROUND: This method has been modified to bypass
        // email validation and verification when developmentMode = true.
        // This allows the form to proceed without valid email input for testing purposes.
        
        // DEVELOPMENT/TESTING MODE: Skip email validation and API calls
        if (developmentMode)
        {
            isProcessing = true;
            statusMessage = string.Empty;
            StateHasChanged();

            try
            {
                // Generate a fake submission ID for development/testing
                currentSubmissionId = Guid.NewGuid().ToString();
                
                // Use placeholder email if none provided
                var emailToUse = string.IsNullOrEmpty(emailModel.Email) ? "development@test.com" : emailModel.Email;
                formData.TenantDetails.Email = emailToUse;
                
                // Skip email verification step and go directly to form filling
                currentStep = FormStep.FormFilling;
                ShowSuccess("Development mode: Email verification bypassed. You can now complete the form.");
            }
            catch (Exception ex)
            {
                // DEVELOPMENT/TESTING: Enhanced error handling with logging
                Console.WriteLine($"Development mode initialization error: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                ShowError($"Development mode error: {ex.Message}. Please check console for details.");
            }
            finally
            {
                isProcessing = false;
                StateHasChanged();
            }
            return;
        }

        // PRODUCTION MODE: Full email validation and verification
        emailSubmitAttempted = true;
        StateHasChanged();

        // Perform manual validation since we removed DataAnnotationsValidator
        if (!IsValidEmailForm())
        {
            return; // Validation errors will be shown due to emailSubmitAttempted = true
        }

        // Validate CAPTCHA
        if (emailModel.CaptchaAnswer != captchaAnswer)
        {
            ShowError("Security verification failed. Please try again.");
            GenerateNewCaptcha(); // Generate new CAPTCHA on failure
            return;
        }

        isProcessing = true;
        statusMessage = string.Empty;
        StateHasChanged();

        try
        {
            var response = await FormApiService.InitializeFormAsync(emailModel.Email);
            
            if (response.Success)
            {
                currentSubmissionId = response.SubmissionId;
                formData.TenantDetails.Email = emailModel.Email; // Pre-fill email in form
                
                // Send verification email
                var emailResponse = await FormApiService.SendEmailVerificationAsync(currentSubmissionId, emailModel.Email);
                
                if (emailResponse.Success)
                {
                    currentStep = FormStep.EmailVerification;
                    ShowSuccess($"Verification code sent to {emailModel.Email}");
                }
                else
                {
                    ShowError(emailResponse.Message);
                }
            }
            else
            {
                ShowError(response.Message);
            }
        }
        catch (Exception ex)
        {
            // DEVELOPMENT/TESTING: Enhanced error handling for production mode failures
            Console.WriteLine($"Production mode initialization error: {ex.Message}");
            ShowError("Failed to initialize form. If you are in development/testing mode with validation commented out, ensure developmentMode = true.");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task VerifyEmail()
    {
        isProcessing = true;
        statusMessage = string.Empty;
        StateHasChanged();

        try
        {
            var response = await FormApiService.VerifyEmailTokenAsync(currentSubmissionId, verificationModel.Token);
            
            if (response.Success)
            {
                currentStep = FormStep.FormFilling;
                ShowSuccess("Email verified successfully! You can now complete the form.");
            }
            else
            {
                ShowError(response.Message);
            }
        }
        catch (Exception ex)
        {
            ShowError("An error occurred during verification. Please try again.");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ResendVerification()
    {
        if (resendCooldown > 0) return;

        isProcessing = true;
        StateHasChanged();

        try
        {
            var response = await FormApiService.SendEmailVerificationAsync(currentSubmissionId, emailModel.Email);
            
            if (response.Success)
            {
                ShowSuccess("Verification code sent again.");
                StartResendCooldown();
            }
            else
            {
                ShowError(response.Message);
            }
        }
        catch (Exception ex)
        {
            ShowError("Failed to resend verification code.");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task HandleSubmitWithValidation()
    {
        // Ensure we're in the correct step
        if (currentStep != FormStep.FormFilling)
        {
            AddDebugMessage($"‚ùå Form submission attempted in wrong step: {currentStep}", "error");
            ShowError("Form submission is only allowed in the form filling step.");
            return;
        }

        // Perform form validation before proceeding
        bool isValid = editContext.Validate();
        if (!isValid && !developmentMode)
        {
            AddDebugMessage("‚ùå Form validation failed - submission cancelled", "error");
            var validationMessages = editContext.GetValidationMessages();
            foreach (var message in validationMessages)
            {
                AddDebugMessage($"Validation Error: {message}", "error");
            }
            ShowError("Please correct the form errors before submitting.");
            StateHasChanged();
            return;
        }

        // Proceed with submission
        await HandleSubmit();
    }

    private async Task HandleSubmit()
    {
        // Clear previous error state
        hasSubmissionError = false;
        submissionErrorDetails = string.Empty;
        
        // Initialize progress tracking
        InitializeSubmissionProgress();
        
        // Add debug message for development mode
        AddDebugMessage("=== FORM SUBMISSION STARTED ===", "info");
        AddDebugMessage($"HandleSubmit fired at {DateTime.Now:yyyy-MM-dd HH:mm:ss}", "info");
        AddDebugMessage($"Development Mode: {developmentMode}", "info");
        AddDebugMessage($"Current Step: {currentStep}", "info");
        AddDebugMessage($"User Email: {formData.TenantDetails.Email}", "info");
        
        // DEBUG: Enhanced form submission logging for troubleshooting
        Console.WriteLine("=== FORM SUBMISSION DEBUG ===");
        Console.WriteLine($"HandleSubmit fired at {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
        Console.WriteLine($"Development Mode: {developmentMode}");
        Console.WriteLine($"Current Step: {currentStep}");
        Console.WriteLine($"User Email: {formData.TenantDetails.Email}");
        
        // Update progress
        UpdateProgress("form-validation", "processing");
        currentProcessingStep = "Validating form data...";
        StateHasChanged();
        await Task.Delay(500); // Give UI time to update
        
        // DEBUG: Additional validation debugging
        Console.WriteLine("=== FORM VALIDATION CHECK ===");
        Console.WriteLine($"Form fields populated:");
        Console.WriteLine($"- Full Name: '{formData.TenantDetails.FullName}'");
        Console.WriteLine($"- Date of Birth: '{formData.TenantDetails.DateOfBirth}'");
        Console.WriteLine($"- Email: '{formData.TenantDetails.Email}'");
        Console.WriteLine($"- Telephone: '{formData.TenantDetails.Telephone}'");
        Console.WriteLine($"- Consent checkbox: {formData.ConsentAndDeclaration.ConsentGiven}");
        Console.WriteLine($"- Signature: '{formData.ConsentAndDeclaration.Signature}'");
        Console.WriteLine($"- Date: '{formData.ConsentAndDeclaration.Date}'");
        Console.WriteLine($"- Print Name: '{formData.ConsentAndDeclaration.PrintName}'");
        
        AddDebugMessage("=== FORM VALIDATION CHECK ===", "info");
        AddDebugMessage($"Full Name: '{formData.TenantDetails.FullName}'", "info");
        AddDebugMessage($"Email: '{formData.TenantDetails.Email}'", "info");
        AddDebugMessage($"Telephone: '{formData.TenantDetails.Telephone}'", "info");
        AddDebugMessage($"Consent: {formData.ConsentAndDeclaration.ConsentGiven}", "info");
        
        bool validationPassed = true;
        if (!editContext.Validate())
        {
            Console.WriteLine("=== FORM VALIDATION FAILED ===");
            var validationMessages = editContext.GetValidationMessages();
            Console.WriteLine($"Number of validation errors: {validationMessages.Count()}");
            
            AddDebugMessage("=== FORM VALIDATION FAILED ===", "error");
            AddDebugMessage($"Number of validation errors: {validationMessages.Count()}", "error");
            
            foreach (var message in validationMessages)
            {
                Console.WriteLine($"Validation Error: {message}");
                AddDebugMessage($"Validation Error: {message}", "error");
            }
            
            UpdateProgress("form-validation", "failed");
            
            // In development mode, allow submission even with validation errors
            if (developmentMode)
            {
                AddDebugMessage("‚ö†Ô∏è Development Mode: Proceeding despite validation errors", "warning");
                Console.WriteLine("‚ö†Ô∏è Development Mode: Proceeding despite validation errors");
                UpdateProgress("form-validation", "completed");
            }
            else
            {
                validationPassed = false;
                currentProcessingStep = "Form validation failed. Please check required fields.";
                hasSubmissionError = true;
                submissionErrorDetails = string.Join("; ", validationMessages);
                isProcessing = false;
                StateHasChanged();
                return;
            }
        }
        else
        {
            Console.WriteLine("=== FORM VALIDATION PASSED ===");
            AddDebugMessage("=== FORM VALIDATION PASSED ===", "info");
            UpdateProgress("form-validation", "completed");
        }

        Console.WriteLine("Starting form submission process...");
        AddDebugMessage("Starting form submission process...", "info");

        isProcessing = true;
        statusMessage = string.Empty;
        
        UpdateProgress("api-call", "processing");
        currentProcessingStep = "Sending form data to server...";
        StateHasChanged();
        await Task.Delay(500); // Give UI time to update

        try
        {
            FormSubmissionResponse response;
            
            // DEVELOPMENT/TESTING WORKAROUND: Use direct submission API when in development mode
            // to bypass email verification requirements
            if (developmentMode)
            {
                Console.WriteLine("=== DEVELOPMENT MODE SUBMISSION ===");
                Console.WriteLine("Using direct submission API (no email verification required)");
                AddDebugMessage("=== DEVELOPMENT MODE SUBMISSION ===", "info");
                AddDebugMessage("Using direct submission API", "info");
                
                // DEVELOPMENT MODE: Use direct submission API (no email verification required)
                response = await FormApiService.SubmitFormDirectAsync(formData);
                
                Console.WriteLine($"Direct submission response - Success: {response.Success}, Message: {response.Message}");
                AddDebugMessage($"API Response - Success: {response.Success}", response.Success ? "info" : "error");
                AddDebugMessage($"API Message: {response.Message}", response.Success ? "info" : "error");
            }
            else
            {
                Console.WriteLine("=== PRODUCTION MODE SUBMISSION ===");
                Console.WriteLine($"Using standard submission with email verification, SubmissionId: {currentSubmissionId}");
                AddDebugMessage("=== PRODUCTION MODE SUBMISSION ===", "info");
                AddDebugMessage($"Using email-verified submission, ID: {currentSubmissionId}", "info");
                
                // PRODUCTION MODE: Use standard submission with email verification
                response = await FormApiService.SubmitFormAsync(currentSubmissionId, formData);
                
                Console.WriteLine($"Standard submission response - Success: {response.Success}, Message: {response.Message}");
                AddDebugMessage($"API Response - Success: {response.Success}", response.Success ? "info" : "error");
                AddDebugMessage($"API Message: {response.Message}", response.Success ? "info" : "error");
            }
            
            UpdateProgress("api-call", response.Success ? "completed" : "failed");
            
            if (response.Success)
            {
                Console.WriteLine("=== FORM SUBMISSION SUCCESSFUL ===");
                Console.WriteLine($"Success message: {response.Message}");
                AddDebugMessage("=== FORM SUBMISSION SUCCESSFUL ===", "info");
                AddDebugMessage($"Success message: {response.Message}", "info");
                
                UpdateProgress("pdf-generation", "completed");
                UpdateProgress("email-sending", "completed");
                UpdateProgress("blob-storage", "completed");
                
                showSuccess = true;
                hasSubmissionError = false;
                currentProcessingStep = "Application submitted successfully!";
                ShowSuccess("Form submitted successfully!");
            }
            else
            {
                Console.WriteLine("=== FORM SUBMISSION FAILED ===");
                Console.WriteLine($"Error message: {response.Message}");
                AddDebugMessage("=== FORM SUBMISSION FAILED ===", "error");
                AddDebugMessage($"Error message: {response.Message}", "error");
                
                UpdateProgress("api-call", "failed");
                hasSubmissionError = true;
                submissionErrorDetails = response.Message;
                currentProcessingStep = "Submission failed. Please try again.";
                ShowError(response.Message);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("=== FORM SUBMISSION EXCEPTION ===");
            Console.WriteLine($"Exception Type: {ex.GetType().Name}");
            Console.WriteLine($"Exception Message: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            
            AddDebugMessage("=== FORM SUBMISSION EXCEPTION ===", "error");
            AddDebugMessage($"Exception: {ex.GetType().Name}", "error");
            AddDebugMessage($"Message: {ex.Message}", "error");
            
            UpdateProgress("api-call", "failed");
            hasSubmissionError = true;
            submissionErrorDetails = $"{ex.GetType().Name}: {ex.Message}";
            currentProcessingStep = "An error occurred during submission.";
            ShowError("An error occurred while submitting the form. Please try again.");
        }
        finally
        {
            Console.WriteLine("=== FORM SUBMISSION CLEANUP ===");
            Console.WriteLine("Resetting processing state");
            AddDebugMessage("=== FORM SUBMISSION CLEANUP ===", "info");
            AddDebugMessage("Resetting processing state", "info");
            
            isProcessing = false;
            StateHasChanged();
        }
    }
    
    private void InitializeSubmissionProgress()
    {
        submissionProgress = new List<SubmissionProgressStep>
        {
            new SubmissionProgressStep { Id = "form-validation", Description = "Validating form data", Status = "pending" },
            new SubmissionProgressStep { Id = "api-call", Description = "Sending data to server", Status = "pending" },
            new SubmissionProgressStep { Id = "pdf-generation", Description = "Generating PDF document", Status = "pending" },
            new SubmissionProgressStep { Id = "email-sending", Description = "Sending confirmation emails", Status = "pending" },
            new SubmissionProgressStep { Id = "blob-storage", Description = "Storing documents", Status = "pending" }
        };
    }
    
    private void UpdateProgress(string stepId, string status)
    {
        var step = submissionProgress.FirstOrDefault(s => s.Id == stepId);
        if (step != null)
        {
            step.Status = status;
        }
    }
    
    private void AddDebugMessage(string message, string level = "info")
    {
        debugMessages.Add(new DebugMessage
        {
            Timestamp = DateTime.Now,
            Message = message,
            Level = level
        });
        
        // Keep only the last 50 messages to prevent memory issues
        if (debugMessages.Count > 50)
        {
            debugMessages.RemoveAt(0);
        }
    }
    
    private void ClearDebugMessages()
    {
        debugMessages.Clear();
        StateHasChanged();
    }
    
    private void FillTestData()
    {
        AddDebugMessage("Filling test data for development testing...", "info");
        
        // Fill required fields
        formData.TenantDetails.FullName = "John Test User";
        formData.TenantDetails.DateOfBirth = DateTime.Now.AddYears(-25);
        formData.TenantDetails.Email = "test@example.com";
        formData.TenantDetails.Telephone = "+44 123 456 7890";
        
        // Fill consent and declaration
        formData.ConsentAndDeclaration.ConsentGiven = true;
        formData.ConsentAndDeclaration.Signature = "John Test User";
        formData.ConsentAndDeclaration.Date = DateTime.Today;
        formData.ConsentAndDeclaration.PrintName = "John Test User";
        formData.ConsentAndDeclaration.DeclarationSignature = "John Test User";
        formData.ConsentAndDeclaration.DeclarationDate = DateTime.Today;
        formData.ConsentAndDeclaration.DeclarationPrintName = "John Test User";
        
        // Fill some declaration checkboxes
        formData.ConsentAndDeclaration.Declaration.MainHome = true;
        formData.ConsentAndDeclaration.Declaration.EnquiriesPermission = true;
        formData.ConsentAndDeclaration.Declaration.CertifyNoJudgements = true;
        formData.ConsentAndDeclaration.Declaration.CertifyNoHousingDebt = true;
        formData.ConsentAndDeclaration.Declaration.CertifyNoLandlordDebt = true;
        formData.ConsentAndDeclaration.Declaration.CertifyNoAbuse = true;
        
        AddDebugMessage("Test data filled successfully", "info");
        StateHasChanged();
    }
    
    private void ShowValidationErrors()
    {
        AddDebugMessage("Checking form validation...", "info");
        
        var isValid = editContext.Validate();
        var validationMessages = editContext.GetValidationMessages().ToList();
        
        AddDebugMessage($"Form is valid: {isValid}", isValid ? "info" : "error");
        AddDebugMessage($"Validation error count: {validationMessages.Count}", validationMessages.Any() ? "warning" : "info");
        
        foreach (var message in validationMessages)
        {
            AddDebugMessage($"Validation Error: {message}", "error");
        }
        
        if (!validationMessages.Any())
        {
            AddDebugMessage("‚úÖ No validation errors found - form is ready for submission!", "info");
        }
        
        StateHasChanged();
    }

    private void ShowSuccess(string message)
    {
        statusMessage = message;
        isError = false;
    }

    private void ShowError(string message)
    {
        statusMessage = message;
        isError = true;
    }

    private void StartResendCooldown()
    {
        resendCooldown = 60; // 60 seconds cooldown
        resendTimer = new System.Threading.Timer(UpdateResendCooldown, null, 0, 1000);
    }

    private void UpdateResendCooldown(object? state)
    {
        if (resendCooldown > 0)
        {
            resendCooldown--;
            InvokeAsync(StateHasChanged);
        }
        else
        {
            resendTimer?.Dispose();
            resendTimer = null;
        }
    }

    public void Dispose()
    {
        resendTimer?.Dispose();
    }

    private void AddAddress()
    {
        if (formData.AddressHistory.Count < 3)
        {
            formData.AddressHistory.Add(new AddressHistoryItem());
        }
    }

    private void RemoveAddress(int index)
    {
        if (index > 0 && index < formData.AddressHistory.Count)
        {
            formData.AddressHistory.RemoveAt(index);
        }
    }
    
    private void GenerateNewCaptcha()
    {
        var random = new Random();
        int num1 = random.Next(1, 20);
        int num2 = random.Next(1, 20);
        
        captchaAnswer = num1 + num2;
        captchaQuestion = $"What is {num1} + {num2}?";
    }

    // Email validation helper methods
    private bool IsValidEmail(string email)
    {
        return !string.IsNullOrEmpty(email);
    }

    private bool IsValidEmailFormat(string email)
    {
        if (string.IsNullOrEmpty(email))
            return false;
            
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private bool IsValidEmailForm()
    {
        bool isValid = true;

        // Check email
        if (!IsValidEmail(emailModel.Email) || !IsValidEmailFormat(emailModel.Email))
        {
            isValid = false;
        }

        // Check confirm email
        if (!IsValidEmail(emailModel.ConfirmEmail) || !IsValidEmailFormat(emailModel.ConfirmEmail))
        {
            isValid = false;
        }

        // Check email equality
        if (!string.IsNullOrEmpty(emailModel.Email) && !string.IsNullOrEmpty(emailModel.ConfirmEmail) && emailModel.Email != emailModel.ConfirmEmail)
        {
            isValid = false;
        }

        // Check captcha
        if (!emailModel.CaptchaAnswer.HasValue || emailModel.CaptchaAnswer.Value < 1 || emailModel.CaptchaAnswer.Value > 100)
        {
            isValid = false;
        }

        return isValid;
    }



    // Models for form steps
    public class EmailEntryModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string ConfirmEmail { get; set; } = string.Empty;

        [Required]
        [Range(1, 100, ErrorMessage = "Please answer the security question correctly.")]
        public int? CaptchaAnswer { get; set; }
    }

    public class EmailVerificationModel
    {
        [Required]
        [StringLength(6, MinimumLength = 5)]
        [RegularExpression(@"^\d+$", ErrorMessage = "Please enter a valid numeric code")]
        public string Token { get; set; } = string.Empty;
    }
    
    // Enhanced UI feedback classes
    public class SubmissionProgressStep
    {
        public string Id { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Status { get; set; } = "pending"; // pending, processing, completed, failed
    }
    
    public class DebugMessage
    {
        public DateTime Timestamp { get; set; }
        public string Message { get; set; } = string.Empty;
        public string Level { get; set; } = "info"; // info, warning, error
    }
}