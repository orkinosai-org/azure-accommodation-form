name: Deploy Python App to Azure

on:
  push:
    branches: [ main ]
    paths:
      - 'python-app/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'python-app/**'
  workflow_dispatch:

env:
  AZURE_WEBAPP_PACKAGE_PATH: './python-app'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      azure-webapp-name: ${{ steps.read-config.outputs.azure-webapp-name }}
      python-version: ${{ steps.read-config.outputs.python-version }}
      azure-publish-profile-secret: ${{ steps.read-config.outputs.azure-publish-profile-secret }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Read configuration from appsettings.json
      id: read-config
      run: |
        cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        # Extract deployment settings from appsettings.json
        AZURE_WEBAPP_NAME=$(python -c "
        import json
        with open('appsettings.json', 'r') as f:
            config = json.load(f)
        print(config.get('DeploymentSettings', {}).get('AzureWebAppName', 'azure-accommodation-form'))
        ")
        
        PYTHON_VERSION=$(python -c "
        import json
        with open('appsettings.json', 'r') as f:
            config = json.load(f)
        print(config.get('DeploymentSettings', {}).get('PythonVersion', '3.12'))
        ")
        
        AZURE_PUBLISH_PROFILE_SECRET=$(python -c "
        import json
        with open('appsettings.json', 'r') as f:
            config = json.load(f)
        print(config.get('DeploymentSettings', {}).get('AzurePublishProfileSecret', 'AZURE_WEBAPP_PUBLISH_PROFILE'))
        ")
        
        echo "azure-webapp-name=$AZURE_WEBAPP_NAME" >> $GITHUB_OUTPUT
        echo "python-version=$PYTHON_VERSION" >> $GITHUB_OUTPUT
        echo "azure-publish-profile-secret=$AZURE_PUBLISH_PROFILE_SECRET" >> $GITHUB_OUTPUT
        
        echo "ðŸ“‹ Configuration loaded from appsettings.json:"
        echo "  Azure Web App Name: $AZURE_WEBAPP_NAME"
        echo "  Python Version: $PYTHON_VERSION"
        echo "  Publish Profile Secret: $AZURE_PUBLISH_PROFILE_SECRET"
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.read-config.outputs.python-version }}
        
    - name: Create and start virtual environment
      run: |
        cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        python -m venv venv
        source venv/bin/activate
        
    - name: Install dependencies
      run: |
        cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        source venv/bin/activate
        pip install -r requirements.txt
        
    - name: Lint with flake8
      run: |
        cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        source venv/bin/activate
        pip install flake8
        # Stop build if syntax errors or undefined names (only check app code, not venv)
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv
        # Exit-zero treats all errors as warnings (only check app code, not venv)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=venv
        
    - name: Test with pytest
      run: |
        cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        source venv/bin/activate
        pip install pytest pytest-asyncio httpx
        pytest tests/ -v || true  # Allow tests to fail for now
        
    - name: Upload artifact for deployment
      uses: actions/upload-artifact@v4
      with:
        name: python-app
        path: |
          ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          !${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/venv/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: python-app
        path: .

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ needs.build.outputs.azure-webapp-name }}
        publish-profile: ${{ secrets[needs.build.outputs.azure-publish-profile-secret] }}
        package: .

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.build.outputs.python-version }}
        
    - name: Install security tools
      run: |
        cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        pip install safety bandit
        
    - name: Run safety check
      run: |
        cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        safety check -r requirements.txt || true
        
    - name: Run bandit security scan
      run: |
        cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        bandit -r app/ -f json -o bandit-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/bandit-report.json