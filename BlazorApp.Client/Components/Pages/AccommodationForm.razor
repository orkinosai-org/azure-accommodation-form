@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

<div class="accommodation-form-container">
    <h3>Accommodation Request Form</h3>
    
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success" role="alert">
            @successMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <EditForm Model="@accommodationRequest" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        
        <div class="form-group mb-3">
            <label for="name" class="form-label">Name *</label>
            <InputText id="name" @bind-Value="accommodationRequest.Name" class="form-control" placeholder="Enter your full name" />
            <ValidationMessage For="@(() => accommodationRequest.Name)" class="text-danger" />
        </div>

        <div class="form-group mb-3">
            <label for="email" class="form-label">Email *</label>
            <InputText id="email" @bind-Value="accommodationRequest.Email" class="form-control" type="email" placeholder="Enter your email address" />
            <ValidationMessage For="@(() => accommodationRequest.Email)" class="text-danger" />
        </div>

        <div class="form-group mb-3">
            <label for="checkin" class="form-label">Check-in Date *</label>
            <InputDate id="checkin" @bind-Value="accommodationRequest.CheckInDate" class="form-control" />
            <ValidationMessage For="@(() => accommodationRequest.CheckInDate)" class="text-danger" />
        </div>

        <div class="form-group mb-3">
            <label for="checkout" class="form-label">Check-out Date *</label>
            <InputDate id="checkout" @bind-Value="accommodationRequest.CheckOutDate" class="form-control" />
            <ValidationMessage For="@(() => accommodationRequest.CheckOutDate)" class="text-danger" />
        </div>

        <div class="form-group mb-3">
            <label for="fileUpload" class="form-label">Upload Image/Document *</label>
            <InputFile id="fileUpload" OnChange="@HandleFileUpload" class="form-control" accept="image/*,.pdf,.doc,.docx" />
            <ValidationMessage For="@(() => accommodationRequest.UploadedFileName)" class="text-danger" />
            @if (!string.IsNullOrEmpty(accommodationRequest.UploadedFileName))
            {
                <div class="mt-2">
                    <small class="text-success">âœ“ File uploaded: @accommodationRequest.UploadedFileName</small>
                </div>
            }
            <small class="form-text text-muted">Please upload an image or document (Max 5MB). Supported formats: JPG, PNG, GIF, PDF, DOC, DOCX</small>
        </div>

        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
            @if (isSubmitting)
            {
                <span class="spinner-border spinner-border-sm me-2" aria-hidden="true"></span>
                <span>Submitting...</span>
            }
            else
            {
                <span>Submit Request</span>
            }
        </button>
    </EditForm>
</div>

@code {
    private AccommodationRequest accommodationRequest = new();
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    private bool isSubmitting = false;

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            // Enhanced validation
            if (!ValidateForm())
            {
                return;
            }

            // Simulate form submission delay
            await Task.Delay(1500);

            // Enhanced success message with more details
            successMessage = $"ðŸŽ‰ Accommodation request submitted successfully!\n" +
                           $"Name: {accommodationRequest.Name}\n" +
                           $"Email: {accommodationRequest.Email}\n" +
                           $"Check-in: {accommodationRequest.CheckInDate:MMM dd, yyyy}\n" +
                           $"Check-out: {accommodationRequest.CheckOutDate:MMM dd, yyyy}\n" +
                           $"File: {accommodationRequest.UploadedFileName}\n" +
                           $"We'll contact you soon with confirmation details.";
            
            // Reset form
            accommodationRequest = new AccommodationRequest();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while submitting your request: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private bool ValidateForm()
    {
        var errors = new List<string>();

        // Check if check-out date is after check-in date
        if (accommodationRequest.CheckOutDate <= accommodationRequest.CheckInDate)
        {
            errors.Add("Check-out date must be after check-in date.");
        }

        // Check if dates are in the future
        if (accommodationRequest.CheckInDate < DateTime.Today)
        {
            errors.Add("Check-in date cannot be in the past.");
        }

        // Check file upload
        if (string.IsNullOrEmpty(accommodationRequest.UploadedFileName))
        {
            errors.Add("Please upload an image or document.");
        }

        if (errors.Any())
        {
            errorMessage = string.Join(" ", errors);
            return false;
        }

        return true;
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            // Validate file size (max 5MB)
            if (file.Size > 5 * 1024 * 1024)
            {
                errorMessage = "File size must be less than 5MB.";
                accommodationRequest.UploadedFileName = string.Empty;
                return;
            }

            // Validate file type
            var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif", "application/pdf", 
                                     "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document" };
            if (!allowedTypes.Contains(file.ContentType))
            {
                errorMessage = "Please upload an image file (JPG, PNG, GIF) or document (PDF, DOC, DOCX).";
                accommodationRequest.UploadedFileName = string.Empty;
                return;
            }

            // In a real application, you would save the file to storage
            // For now, just store the filename
            accommodationRequest.UploadedFileName = file.Name;
            errorMessage = string.Empty;
            StateHasChanged();
        }
    }

    private void HandleInvalidSubmit()
    {
        errorMessage = "Please correct the errors above and try again.";
        successMessage = string.Empty;
    }

    public class AccommodationRequest
    {
        [Required(ErrorMessage = "Name is required")]
        [StringLength(100, ErrorMessage = "Name cannot exceed 100 characters")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Check-in date is required")]
        [DataType(DataType.Date)]
        public DateTime CheckInDate { get; set; } = DateTime.Today.AddDays(1);

        [Required(ErrorMessage = "Check-out date is required")]
        [DataType(DataType.Date)]
        public DateTime CheckOutDate { get; set; } = DateTime.Today.AddDays(2);

        [Required(ErrorMessage = "Please upload an image or document")]
        public string? UploadedFileName { get; set; }
    }
}

<style>
    .accommodation-form-container {
        background: #f8f9fa;
        padding: 2rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-label {
        font-weight: 600;
        margin-bottom: 0.5rem;
        display: block;
    }

    .form-control {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        font-size: 1rem;
    }

    .form-control:focus {
        border-color: #80bdff;
        outline: 0;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 0.25rem;
        cursor: pointer;
        font-size: 1rem;
        text-decoration: none;
        display: inline-block;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background-color: #0056b3;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .alert {
        padding: 0.75rem 1.25rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        border-radius: 0.25rem;
    }

    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .text-danger {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .spinner-border {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        vertical-align: text-bottom;
        border: 0.125em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    .spinner-border-sm {
        width: 0.875rem;
        height: 0.875rem;
        border-width: 0.125em;
    }

    .me-2 {
        margin-right: 0.5rem;
    }

    .mt-2 {
        margin-top: 0.5rem;
    }

    .text-success {
        color: #28a745;
    }

    .text-muted {
        color: #6c757d;
    }

    .form-text {
        margin-top: 0.25rem;
        font-size: 0.875rem;
    }

    /* Success message formatting */
    .alert-success {
        white-space: pre-line;
    }

    @@keyframes spinner-border {
        to {
            transform: rotate(360deg);
        }
    }
</style>